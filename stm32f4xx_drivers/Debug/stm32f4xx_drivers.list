
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002284  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002540  08002540  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002540  08002540  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002540  08002540  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002540  08002540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000070  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000034c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c68  00000000  00000000  00023566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  000241d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000310  00000000  00000000  00024568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004109  00000000  00000000  00024878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000424f  00000000  00000000  00028981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d735  00000000  00000000  0002cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003a305  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013fc  00000000  00000000  0003a358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08002414 	.word	0x08002414

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08002414 	.word	0x08002414

080001e8 <get_string_datename>:
#include "ds1307.h"
#include "lcd.h"

#define SYSTICK_TIM_CLK 16000000

char* get_string_datename(uint8_t i){
 80001e8:	b4b0      	push	{r4, r5, r7}
 80001ea:	b08b      	sub	sp, #44	; 0x2c
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	char* days[]={"Monday","Tuesday","Wednesday","Thursday","Friday","Saturday", "Sunday"};
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <get_string_datename+0x38>)
 80001f4:	f107 040c 	add.w	r4, r7, #12
 80001f8:	461d      	mov	r5, r3
 80001fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days[i-1];
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	3b01      	subs	r3, #1
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	3328      	adds	r3, #40	; 0x28
 800020e:	443b      	add	r3, r7
 8000210:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000214:	4618      	mov	r0, r3
 8000216:	372c      	adds	r7, #44	; 0x2c
 8000218:	46bd      	mov	sp, r7
 800021a:	bcb0      	pop	{r4, r5, r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	08002470 	.word	0x08002470

08000224 <get_string>:

void get_string(uint8_t data,char* chngdata){
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
	if(data<10){
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b09      	cmp	r3, #9
 8000234:	d809      	bhi.n	800024a <get_string+0x26>
		*chngdata='0';
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	2230      	movs	r2, #48	; 0x30
 800023a:	701a      	strb	r2, [r3, #0]
		*(chngdata+1)=data+48;
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	3301      	adds	r3, #1
 8000240:	79fa      	ldrb	r2, [r7, #7]
 8000242:	3230      	adds	r2, #48	; 0x30
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	701a      	strb	r2, [r3, #0]
	}else{
		*chngdata=(data/10)+48;
		*(chngdata+1)=(data%10)+48;
	}
}
 8000248:	e019      	b.n	800027e <get_string+0x5a>
		*chngdata=(data/10)+48;
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	4a0f      	ldr	r2, [pc, #60]	; (800028c <get_string+0x68>)
 800024e:	fba2 2303 	umull	r2, r3, r2, r3
 8000252:	08db      	lsrs	r3, r3, #3
 8000254:	b2db      	uxtb	r3, r3
 8000256:	3330      	adds	r3, #48	; 0x30
 8000258:	b2da      	uxtb	r2, r3
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	701a      	strb	r2, [r3, #0]
		*(chngdata+1)=(data%10)+48;
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <get_string+0x68>)
 8000262:	fba3 1302 	umull	r1, r3, r3, r2
 8000266:	08d9      	lsrs	r1, r3, #3
 8000268:	460b      	mov	r3, r1
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	440b      	add	r3, r1
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	1ad3      	subs	r3, r2, r3
 8000272:	b2da      	uxtb	r2, r3
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	3301      	adds	r3, #1
 8000278:	3230      	adds	r2, #48	; 0x30
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	701a      	strb	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	cccccccd 	.word	0xcccccccd

08000290 <get_string_time>:
char* get_string_time(RTC_Time_t *rtc_time){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	//hh:mm:ss
	static char data[9];
	data[2]=':';
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <get_string_time+0x48>)
 800029a:	223a      	movs	r2, #58	; 0x3a
 800029c:	709a      	strb	r2, [r3, #2]
	data[5]=':';
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <get_string_time+0x48>)
 80002a0:	223a      	movs	r2, #58	; 0x3a
 80002a2:	715a      	strb	r2, [r3, #5]
	get_string(rtc_time->hours,data);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	789b      	ldrb	r3, [r3, #2]
 80002a8:	490b      	ldr	r1, [pc, #44]	; (80002d8 <get_string_time+0x48>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <get_string>
	get_string(rtc_time->minutes,&data[3]);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	785b      	ldrb	r3, [r3, #1]
 80002b4:	4909      	ldr	r1, [pc, #36]	; (80002dc <get_string_time+0x4c>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ffb4 	bl	8000224 <get_string>
	get_string(rtc_time->seconds,&data[6]);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <get_string_time+0x50>)
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ffae 	bl	8000224 <get_string>
	data[8]='\0';
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <get_string_time+0x48>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	721a      	strb	r2, [r3, #8]
	return data;
 80002ce:	4b02      	ldr	r3, [pc, #8]	; (80002d8 <get_string_time+0x48>)
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000090 	.word	0x20000090
 80002dc:	20000093 	.word	0x20000093
 80002e0:	20000096 	.word	0x20000096

080002e4 <get_string_date>:
char* get_string_date(RTC_Date_t *rtc_date){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	//dd/mm/yy
	static char data[9];
	data[2]='/';
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <get_string_date+0x48>)
 80002ee:	222f      	movs	r2, #47	; 0x2f
 80002f0:	709a      	strb	r2, [r3, #2]
	data[5]='/';
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <get_string_date+0x48>)
 80002f4:	222f      	movs	r2, #47	; 0x2f
 80002f6:	715a      	strb	r2, [r3, #5]
	get_string(rtc_date->date,data);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	785b      	ldrb	r3, [r3, #1]
 80002fc:	490b      	ldr	r1, [pc, #44]	; (800032c <get_string_date+0x48>)
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff90 	bl	8000224 <get_string>
	get_string(rtc_date->month,&data[3]);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	789b      	ldrb	r3, [r3, #2]
 8000308:	4909      	ldr	r1, [pc, #36]	; (8000330 <get_string_date+0x4c>)
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff8a 	bl	8000224 <get_string>
	get_string(rtc_date->year,&data[6]);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	78db      	ldrb	r3, [r3, #3]
 8000314:	4907      	ldr	r1, [pc, #28]	; (8000334 <get_string_date+0x50>)
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff84 	bl	8000224 <get_string>
	data[8]='\0';
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <get_string_date+0x48>)
 800031e:	2200      	movs	r2, #0
 8000320:	721a      	strb	r2, [r3, #8]
	return data;
 8000322:	4b02      	ldr	r3, [pc, #8]	; (800032c <get_string_date+0x48>)
}
 8000324:	4618      	mov	r0, r3
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000009c 	.word	0x2000009c
 8000330:	2000009f 	.word	0x2000009f
 8000334:	200000a2 	.word	0x200000a2

08000338 <init_systick_timer>:
void init_systick_timer(uint32_t tick_hz)
{
 8000338:	b480      	push	{r7}
 800033a:	b087      	sub	sp, #28
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <init_systick_timer+0x60>)
 8000342:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <init_systick_timer+0x64>)
 8000346:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <init_systick_timer+0x68>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000350:	3b01      	subs	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	431a      	orrs	r2, r3
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f043 0202 	orr.w	r2, r3, #2
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000372:	693b      	ldr	r3, [r7, #16]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f043 0204 	orr.w	r2, r3, #4
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f043 0201 	orr.w	r2, r3, #1
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	601a      	str	r2, [r3, #0]

}
 800038a:	bf00      	nop
 800038c:	371c      	adds	r7, #28
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	e000e014 	.word	0xe000e014
 800039c:	e000e010 	.word	0xe000e010
 80003a0:	00f42400 	.word	0x00f42400

080003a4 <main>:
int main(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
	RTC_Time_t rtc_time;
	RTC_Date_t rtc_date;
	lcd_init();
 80003aa:	f000 fc11 	bl	8000bd0 <lcd_init>

	lcd_display_clear();
 80003ae:	f000 fd15 	bl	8000ddc <lcd_display_clear>
	lcd_display_return_home();
 80003b2:	f000 fd4b 	bl	8000e4c <lcd_display_return_home>

	rtc_date.day=FRIDAY;
 80003b6:	2305      	movs	r3, #5
 80003b8:	713b      	strb	r3, [r7, #4]
	rtc_date.date=18;
 80003ba:	2312      	movs	r3, #18
 80003bc:	717b      	strb	r3, [r7, #5]
	rtc_date.month=8;
 80003be:	2308      	movs	r3, #8
 80003c0:	71bb      	strb	r3, [r7, #6]
	rtc_date.year=23;
 80003c2:	2317      	movs	r3, #23
 80003c4:	71fb      	strb	r3, [r7, #7]

	rtc_time.hours=11;
 80003c6:	230b      	movs	r3, #11
 80003c8:	72bb      	strb	r3, [r7, #10]
	rtc_time.minutes=31;
 80003ca:	231f      	movs	r3, #31
 80003cc:	727b      	strb	r3, [r7, #9]
	rtc_time.seconds=50;
 80003ce:	2332      	movs	r3, #50	; 0x32
 80003d0:	723b      	strb	r3, [r7, #8]
	rtc_time.time_format=TIME_FORMAT_12HRS_PM;
 80003d2:	2301      	movs	r3, #1
 80003d4:	72fb      	strb	r3, [r7, #11]

	if(DS1307_Init()){
 80003d6:	f000 f9bd 	bl	8000754 <DS1307_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d009      	beq.n	80003f4 <main+0x50>
		printf("Clock has not been initialized\n");
 80003e0:	482e      	ldr	r0, [pc, #184]	; (800049c <main+0xf8>)
 80003e2:	f001 fe21 	bl	8002028 <puts>
		fflush(stdout);
 80003e6:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <main+0xfc>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fb95 	bl	8001b1c <fflush>
		while(1);
 80003f2:	e7fe      	b.n	80003f2 <main+0x4e>
	}
	init_systick_timer(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f7ff ff9f 	bl	8000338 <init_systick_timer>
	printf("Clock has been initialized\n");
 80003fa:	482a      	ldr	r0, [pc, #168]	; (80004a4 <main+0x100>)
 80003fc:	f001 fe14 	bl	8002028 <puts>
	fflush(stdout);
 8000400:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <main+0xfc>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	4618      	mov	r0, r3
 8000408:	f001 fb88 	bl	8001b1c <fflush>
	DS1307_Set_Current_Time(&rtc_time);
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f9bb 	bl	800078c <DS1307_Set_Current_Time>
	DS1307_Set_Current_Date(&rtc_date);
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fa4f 	bl	80008bc <DS1307_Set_Current_Date>

	DS1307_Get_Current_Time(&rtc_time);
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f9fb 	bl	800081e <DS1307_Get_Current_Time>
	DS1307_Get_Current_Date(&rtc_date);
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fa76 	bl	800091c <DS1307_Get_Current_Date>

	if(rtc_time.time_format==TIME_FORMAT_24HRS){
 8000430:	7afb      	ldrb	r3, [r7, #11]
 8000432:	2b02      	cmp	r3, #2
 8000434:	d109      	bne.n	800044a <main+0xa6>
		//printf("The current time %s\n",get_string_time(&rtc_time));
		lcd_print_string(get_string_time(&rtc_time));
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff28 	bl	8000290 <get_string_time>
 8000440:	4603      	mov	r3, r0
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fbb0 	bl	8000ba8 <lcd_print_string>
 8000448:	e012      	b.n	8000470 <main+0xcc>

	}else{
		char * am_pm;
		am_pm=(rtc_time.time_format==TIME_FORMAT_12HRS_AM)? "AM": "PM";
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d101      	bne.n	8000454 <main+0xb0>
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <main+0x104>)
 8000452:	e000      	b.n	8000456 <main+0xb2>
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <main+0x108>)
 8000456:	60fb      	str	r3, [r7, #12]

		//printf("The current time is %s  %s\n",get_string_time(&rtc_time),am_pm);
		lcd_print_string(get_string_time(&rtc_time));
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff17 	bl	8000290 <get_string_time>
 8000462:	4603      	mov	r3, r0
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fb9f 	bl	8000ba8 <lcd_print_string>
		lcd_print_string(am_pm);
 800046a:	68f8      	ldr	r0, [r7, #12]
 800046c:	f000 fb9c 	bl	8000ba8 <lcd_print_string>
		//fflush(stdout);
	}
	//printf("The current date is  %s <%s>\n",get_string_date(&rtc_date),get_string_datename(rtc_date.day));
	lcd_set_cursor(2, 1);
 8000470:	2101      	movs	r1, #1
 8000472:	2002      	movs	r0, #2
 8000474:	f000 fc3c 	bl	8000cf0 <lcd_set_cursor>
	lcd_print_string(get_string_date(&rtc_date));
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff32 	bl	80002e4 <get_string_date>
 8000480:	4603      	mov	r3, r0
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fb90 	bl	8000ba8 <lcd_print_string>
	lcd_print_string(get_string_datename(rtc_date.day));
 8000488:	793b      	ldrb	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff feac 	bl	80001e8 <get_string_datename>
 8000490:	4603      	mov	r3, r0
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fb88 	bl	8000ba8 <lcd_print_string>
	//fflush(stdout);
	while(1);
 8000498:	e7fe      	b.n	8000498 <main+0xf4>
 800049a:	bf00      	nop
 800049c:	0800248c 	.word	0x0800248c
 80004a0:	20000010 	.word	0x20000010
 80004a4:	080024ac 	.word	0x080024ac
 80004a8:	080024c8 	.word	0x080024c8
 80004ac:	080024cc 	.word	0x080024cc

080004b0 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
	RTC_Time_t rtc_time;
	RTC_Date_t rtc_date;
	DS1307_Get_Current_Time(&rtc_time);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f9af 	bl	800081e <DS1307_Get_Current_Time>
	DS1307_Get_Current_Date(&rtc_date);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fa2a 	bl	800091c <DS1307_Get_Current_Date>
	lcd_display_clear();
 80004c8:	f000 fc88 	bl	8000ddc <lcd_display_clear>
	lcd_display_return_home();
 80004cc:	f000 fcbe 	bl	8000e4c <lcd_display_return_home>

	if(rtc_time.time_format==TIME_FORMAT_24HRS){
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d109      	bne.n	80004ea <SysTick_Handler+0x3a>
		//printf("The current time %s\n",get_string_time(&rtc_time));
		lcd_print_string(get_string_time(&rtc_time));
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fed8 	bl	8000290 <get_string_time>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fb60 	bl	8000ba8 <lcd_print_string>
 80004e8:	e015      	b.n	8000516 <SysTick_Handler+0x66>

	}else{
		char * am_pm;
		am_pm=(rtc_time.time_format==TIME_FORMAT_12HRS_AM)? "AM": "PM";
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d101      	bne.n	80004f4 <SysTick_Handler+0x44>
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <SysTick_Handler+0xa4>)
 80004f2:	e000      	b.n	80004f6 <SysTick_Handler+0x46>
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <SysTick_Handler+0xa8>)
 80004f6:	60fb      	str	r3, [r7, #12]

		//printf("The current time is %s  %s\n",get_string_time(&rtc_time),am_pm);
		//fflush(stdout);
		lcd_print_string(get_string_time(&rtc_time));
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fec7 	bl	8000290 <get_string_time>
 8000502:	4603      	mov	r3, r0
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fb4f 	bl	8000ba8 <lcd_print_string>
		lcd_print_string(" ");
 800050a:	4814      	ldr	r0, [pc, #80]	; (800055c <SysTick_Handler+0xac>)
 800050c:	f000 fb4c 	bl	8000ba8 <lcd_print_string>
		lcd_print_string(am_pm);
 8000510:	68f8      	ldr	r0, [r7, #12]
 8000512:	f000 fb49 	bl	8000ba8 <lcd_print_string>
	}
	//printf("The current date is  %s <%s>\n",get_string_date(&rtc_date),get_string_datename(rtc_date.day));
	//fflush(stdout);
	lcd_set_cursor(2, 1);
 8000516:	2101      	movs	r1, #1
 8000518:	2002      	movs	r0, #2
 800051a:	f000 fbe9 	bl	8000cf0 <lcd_set_cursor>
	lcd_print_string(get_string_date(&rtc_date));
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff fedf 	bl	80002e4 <get_string_date>
 8000526:	4603      	mov	r3, r0
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fb3d 	bl	8000ba8 <lcd_print_string>
	lcd_print_string("<");
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <SysTick_Handler+0xb0>)
 8000530:	f000 fb3a 	bl	8000ba8 <lcd_print_string>
	lcd_print_string(get_string_datename(rtc_date.day));
 8000534:	793b      	ldrb	r3, [r7, #4]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe56 	bl	80001e8 <get_string_datename>
 800053c:	4603      	mov	r3, r0
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fb32 	bl	8000ba8 <lcd_print_string>
	lcd_print_string(">");
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <SysTick_Handler+0xb4>)
 8000546:	f000 fb2f 	bl	8000ba8 <lcd_print_string>
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	080024c8 	.word	0x080024c8
 8000558:	080024cc 	.word	0x080024cc
 800055c:	080024d0 	.word	0x080024d0
 8000560:	080024d4 	.word	0x080024d4
 8000564:	080024d8 	.word	0x080024d8

08000568 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <ITM_SendChar+0x48>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <ITM_SendChar+0x48>)
 8000578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800057c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <ITM_SendChar+0x4c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <ITM_SendChar+0x4c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800058a:	bf00      	nop
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f8      	beq.n	800058c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800059a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000edfc 	.word	0xe000edfc
 80005b4:	e0000e00 	.word	0xe0000e00

080005b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	e00a      	b.n	80005e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ca:	f3af 8000 	nop.w
 80005ce:	4601      	mov	r1, r0
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	b2ca      	uxtb	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf0      	blt.n	80005ca <_read+0x12>
  }

  return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffab 	bl	8000568 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x12>
    //__io_putchar(*ptr++);
  }
  return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_close>:

int _close(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000652:	605a      	str	r2, [r3, #4]
  return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <_isatty>:

int _isatty(int file)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <_sbrk+0x5c>)
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <_sbrk+0x60>)
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <_sbrk+0x64>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <_sbrk+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d207      	bcs.n	80006d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c4:	f001 f962 	bl	800198c <__errno>
 80006c8:	4603      	mov	r3, r0
 80006ca:	220c      	movs	r2, #12
 80006cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	e009      	b.n	80006e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <_sbrk+0x64>)
 80006e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20020000 	.word	0x20020000
 80006f4:	00000400 	.word	0x00000400
 80006f8:	200000a8 	.word	0x200000a8
 80006fc:	200000e8 	.word	0x200000e8

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000704:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072e:	f001 fafd 	bl	8001d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fe37 	bl	80003a4 <main>

08000736 <LoopForever>:

LoopForever:
  b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000744:	08002548 	.word	0x08002548
  ldr r2, =_sbss
 8000748:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800074c:	200000e4 	.word	0x200000e4

08000750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC_IRQHandler>
	...

08000754 <DS1307_Init>:
static uint8_t bcd_to_binary(uint8_t data);
static uint8_t binary_to_bcd(uint8_t data);


//if returns 1 ,CH=1, so it is failed,if returns 0 ,CH=0, so it is succeed
uint8_t DS1307_Init(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	// initialize the i2c pins
	ds1307_i2c_pin_config();
 800075a:	f000 f913 	bl	8000984 <ds1307_i2c_pin_config>
	//initialize the i2c peripheral
	ds1307_i2c_config();
 800075e:	f000 f939 	bl	80009d4 <ds1307_i2c_config>
	//Enable I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, Enable);
 8000762:	2101      	movs	r1, #1
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <DS1307_Init+0x34>)
 8000766:	f001 f876 	bl	8001856 <I2C_PeripheralControl>
	//make clock halt =0
	ds1307_write(0x00,DS1307_ADDR_SEC);
 800076a:	2100      	movs	r1, #0
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f94d 	bl	8000a0c <ds1307_write>
	//check clock halt
	uint8_t clock_state=ds1307_read(DS1307_ADDR_SEC);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f966 	bl	8000a44 <ds1307_read>
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
	return clock_state;
 800077c:	79fb      	ldrb	r3, [r7, #7]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40005400 	.word	0x40005400

0800078c <DS1307_Set_Current_Time>:

void DS1307_Set_Current_Time(RTC_Time_t* rtc_time){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hours;
	seconds=binary_to_bcd(rtc_time->seconds);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f993 	bl	8000ac4 <binary_to_bcd>
 800079e:	4603      	mov	r3, r0
 80007a0:	73bb      	strb	r3, [r7, #14]
	seconds&=~(1<<7);
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007a8:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f92c 	bl	8000a0c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f983 	bl	8000ac4 <binary_to_bcd>
 80007be:	4603      	mov	r3, r0
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f922 	bl	8000a0c <ds1307_write>
	hours=binary_to_bcd(rtc_time->hours);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	789b      	ldrb	r3, [r3, #2]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f979 	bl	8000ac4 <binary_to_bcd>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format==TIME_FORMAT_24HRS){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	78db      	ldrb	r3, [r3, #3]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d104      	bne.n	80007e8 <DS1307_Set_Current_Time+0x5c>
		hours&=~(1<<6);
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007e4:	73fb      	strb	r3, [r7, #15]
 80007e6:	e011      	b.n	800080c <DS1307_Set_Current_Time+0x80>
	}else{
		hours|=(1<<6);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ee:	73fb      	strb	r3, [r7, #15]
		hours=(rtc_time->time_format==TIME_FORMAT_12HRS_PM) ? hours|(1<<5) : hours&~(1<<5);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	78db      	ldrb	r3, [r3, #3]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d104      	bne.n	8000802 <DS1307_Set_Current_Time+0x76>
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	e003      	b.n	800080a <DS1307_Set_Current_Time+0x7e>
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f023 0320 	bic.w	r3, r3, #32
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hours, DS1307_ADDR_HRS);
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f8fb 	bl	8000a0c <ds1307_write>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <DS1307_Get_Current_Time>:
void DS1307_Get_Current_Time(RTC_Time_t* rtc_time){
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
	uint8_t seconds,minutes,hrs;
	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000826:	2000      	movs	r0, #0
 8000828:	f000 f90c 	bl	8000a44 <ds1307_read>
 800082c:	4603      	mov	r3, r0
 800082e:	73bb      	strb	r3, [r7, #14]
	seconds&=~(1<<7);
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000836:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds=bcd_to_binary(seconds);
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f920 	bl	8000a80 <bcd_to_binary>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	701a      	strb	r2, [r3, #0]
	minutes=ds1307_read(DS1307_ADDR_MIN);
 8000848:	2001      	movs	r0, #1
 800084a:	f000 f8fb 	bl	8000a44 <ds1307_read>
 800084e:	4603      	mov	r3, r0
 8000850:	737b      	strb	r3, [r7, #13]
	minutes&=~(1<<7);
 8000852:	7b7b      	ldrb	r3, [r7, #13]
 8000854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000858:	737b      	strb	r3, [r7, #13]
	rtc_time->minutes=bcd_to_binary(minutes);
 800085a:	7b7b      	ldrb	r3, [r7, #13]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f90f 	bl	8000a80 <bcd_to_binary>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	705a      	strb	r2, [r3, #1]
	hrs=ds1307_read(DS1307_ADDR_HRS);
 800086a:	2002      	movs	r0, #2
 800086c:	f000 f8ea 	bl	8000a44 <ds1307_read>
 8000870:	4603      	mov	r3, r0
 8000872:	73fb      	strb	r3, [r7, #15]
	if(hrs&(1<<6)){
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00f      	beq.n	800089e <DS1307_Get_Current_Time+0x80>
		//12 hour format
		rtc_time->time_format=!((hrs&(1<<5))==0);
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2db      	uxtb	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	70da      	strb	r2, [r3, #3]
		hrs&=~(0x7<<5);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e002      	b.n	80008a4 <DS1307_Get_Current_Time+0x86>

	}else{
		rtc_time->time_format=TIME_FORMAT_24HRS;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2202      	movs	r2, #2
 80008a2:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours=bcd_to_binary(hrs);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f8ea 	bl	8000a80 <bcd_to_binary>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	709a      	strb	r2, [r3, #2]
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <DS1307_Set_Current_Date>:

void DS1307_Set_Current_Date(RTC_Date_t* rtc_date){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f8fb 	bl	8000ac4 <binary_to_bcd>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2104      	movs	r1, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f89a 	bl	8000a0c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f8f1 	bl	8000ac4 <binary_to_bcd>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2103      	movs	r1, #3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f890 	bl	8000a0c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	789b      	ldrb	r3, [r3, #2]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f8e7 	bl	8000ac4 <binary_to_bcd>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2105      	movs	r1, #5
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f886 	bl	8000a0c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	78db      	ldrb	r3, [r3, #3]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f8dd 	bl	8000ac4 <binary_to_bcd>
 800090a:	4603      	mov	r3, r0
 800090c:	2106      	movs	r1, #6
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f87c 	bl	8000a0c <ds1307_write>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <DS1307_Get_Current_Date>:
void DS1307_Get_Current_Date(RTC_Date_t* rtc_date){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	rtc_date->date=bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000924:	2004      	movs	r0, #4
 8000926:	f000 f88d 	bl	8000a44 <ds1307_read>
 800092a:	4603      	mov	r3, r0
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8a7 	bl	8000a80 <bcd_to_binary>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	705a      	strb	r2, [r3, #1]
	rtc_date->day=bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800093a:	2003      	movs	r0, #3
 800093c:	f000 f882 	bl	8000a44 <ds1307_read>
 8000940:	4603      	mov	r3, r0
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f89c 	bl	8000a80 <bcd_to_binary>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	701a      	strb	r2, [r3, #0]
	rtc_date->month=bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000950:	2005      	movs	r0, #5
 8000952:	f000 f877 	bl	8000a44 <ds1307_read>
 8000956:	4603      	mov	r3, r0
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f891 	bl	8000a80 <bcd_to_binary>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	709a      	strb	r2, [r3, #2]
	rtc_date->year=bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000966:	2006      	movs	r0, #6
 8000968:	f000 f86c 	bl	8000a44 <ds1307_read>
 800096c:	4603      	mov	r3, r0
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f886 	bl	8000a80 <bcd_to_binary>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	70da      	strb	r2, [r3, #3]
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
	GPIO_Handle_t iic_pins;
	memset(&iic_pins,0,sizeof(iic_pins));
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	220c      	movs	r2, #12
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f001 f9f2 	bl	8001d7a <memset>
	iic_pins.GPIO_PinConfig.GPIO_PinNumber=DS1307_I2C_SDA_PIN;//FOR SDA
 8000996:	2307      	movs	r3, #7
 8000998:	723b      	strb	r3, [r7, #8]
	iic_pins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 800099a:	2302      	movs	r3, #2
 800099c:	727b      	strb	r3, [r7, #9]
	iic_pins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_OD;
 800099e:	2301      	movs	r3, #1
 80009a0:	733b      	strb	r3, [r7, #12]
	iic_pins.GPIO_PinConfig.GPIO_PinPuPdControl=DS1307_I2C_PUPD;
 80009a2:	2301      	movs	r3, #1
 80009a4:	72fb      	strb	r3, [r7, #11]
	iic_pins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 80009a6:	2302      	movs	r3, #2
 80009a8:	72bb      	strb	r3, [r7, #10]
	iic_pins.pGPIOx=DS1307_I2C_GPIO_PORT;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <ds1307_i2c_pin_config+0x4c>)
 80009ac:	607b      	str	r3, [r7, #4]
	iic_pins.GPIO_PinConfig.GPIO_PinAltFunMode=GPIO_AF4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	737b      	strb	r3, [r7, #13]
	//SDA
	GPIO_Init(&iic_pins);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fb3b 	bl	8001030 <GPIO_Init>
	//SCL
	iic_pins.GPIO_PinConfig.GPIO_PinNumber=DS1307_I2C_SCL_PIN;
 80009ba:	2306      	movs	r3, #6
 80009bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&iic_pins);
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fb35 	bl	8001030 <GPIO_Init>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40020400 	.word	0x40020400

080009d4 <ds1307_i2c_config>:
static void ds1307_i2c_config(void){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	memset(&g_ds1307I2CHandle,0,sizeof(g_ds1307I2CHandle));
 80009d8:	2228      	movs	r2, #40	; 0x28
 80009da:	2100      	movs	r1, #0
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <ds1307_i2c_config+0x2c>)
 80009de:	f001 f9cc 	bl	8001d7a <memset>
	g_ds1307I2CHandle.pI2Cx=DS1307_I2C;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <ds1307_i2c_config+0x2c>)
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <ds1307_i2c_config+0x30>)
 80009e6:	601a      	str	r2, [r3, #0]
	g_ds1307I2CHandle.I2C_Config.I2C_ACKControl=I2C_ACK_ENABLE;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <ds1307_i2c_config+0x2c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	725a      	strb	r2, [r3, #9]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed=DS1307_I2C_SPEED;
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <ds1307_i2c_config+0x2c>)
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <ds1307_i2c_config+0x34>)
 80009f2:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2CHandle);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <ds1307_i2c_config+0x2c>)
 80009f6:	f000 fd4b 	bl	8001490 <I2C_Init>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	40005400 	.word	0x40005400
 8000a08:	000186a0 	.word	0x000186a0

08000a0c <ds1307_write>:
static void ds1307_write(uint8_t data,uint8_t reg_addr){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0]=reg_addr;
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	733b      	strb	r3, [r7, #12]
	tx[1]=data;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 8000a24:	f107 010c 	add.w	r1, r7, #12
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2368      	movs	r3, #104	; 0x68
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <ds1307_write+0x34>)
 8000a32:	f000 fd8b 	bl	800154c <I2C_MasterSendData>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000ac 	.word	0x200000ac

08000a44 <ds1307_read>:
static uint8_t ds1307_read(uint8_t reg_addr ){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 8000a4e:	1df9      	adds	r1, r7, #7
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2368      	movs	r3, #104	; 0x68
 8000a56:	2201      	movs	r2, #1
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <ds1307_read+0x38>)
 8000a5a:	f000 fd77 	bl	800154c <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 8000a5e:	f107 010f 	add.w	r1, r7, #15
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2368      	movs	r3, #104	; 0x68
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <ds1307_read+0x38>)
 8000a6c:	f000 fdd1 	bl	8001612 <I2C_MasterReceiveData>
	return data;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000ac 	.word	0x200000ac

08000a80 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t data){
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	uint8_t units_digit=0,tens_digit=0,result=0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73bb      	strb	r3, [r7, #14]
 8000a92:	2300      	movs	r3, #0
 8000a94:	737b      	strb	r3, [r7, #13]
	units_digit=data&0x0f;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	73fb      	strb	r3, [r7, #15]
	tens_digit=(data>>4)&0x0f;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	73bb      	strb	r3, [r7, #14]
	result=(tens_digit*10)+units_digit;
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	737b      	strb	r3, [r7, #13]
	return result;
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <binary_to_bcd>:
static uint8_t binary_to_bcd(uint8_t data){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	uint8_t units_digit=0,tens_digit=0,result=0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73bb      	strb	r3, [r7, #14]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	737b      	strb	r3, [r7, #13]
	units_digit=data%10;
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <binary_to_bcd+0x58>)
 8000ade:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae2:	08d9      	lsrs	r1, r3, #3
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	440b      	add	r3, r1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	73fb      	strb	r3, [r7, #15]
	tens_digit=data/10;
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <binary_to_bcd+0x58>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	08db      	lsrs	r3, r3, #3
 8000afa:	73bb      	strb	r3, [r7, #14]
	result=units_digit;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	737b      	strb	r3, [r7, #13]
	tens_digit=(tens_digit<<4)&0xf0;
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	73bb      	strb	r3, [r7, #14]
	result|=tens_digit;
 8000b06:	7b7a      	ldrb	r2, [r7, #13]
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	737b      	strb	r3, [r7, #13]
	return result;
 8000b0e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	cccccccd 	.word	0xcccccccd

08000b20 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t value);
static void udelay(uint32_t value);


void lcd_send_command(uint8_t data){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	//make RS 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <lcd_send_command+0x40>)
 8000b30:	f000 fc30 	bl	8001394 <GPIO_WriteToOutputPin>
	//make RW 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <lcd_send_command+0x40>)
 8000b3a:	f000 fc2b 	bl	8001394 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f8fb 	bl	8000d40 <write_4_bits>
	write_4_bits(data & 0x0F);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f8f4 	bl	8000d40 <write_4_bits>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <lcd_send_char>:

void lcd_send_char(uint8_t data){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	//make RS 1
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2100      	movs	r1, #0
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <lcd_send_char+0x40>)
 8000b74:	f000 fc0e 	bl	8001394 <GPIO_WriteToOutputPin>
	//make RW 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <lcd_send_char+0x40>)
 8000b7e:	f000 fc09 	bl	8001394 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f8d9 	bl	8000d40 <write_4_bits>
	write_4_bits(data & 0x0F);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f8d2 	bl	8000d40 <write_4_bits>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020c00 	.word	0x40020c00

08000ba8 <lcd_print_string>:

void lcd_print_string(char *message){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	do{
		lcd_send_char((uint8_t)*message++);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffd3 	bl	8000b64 <lcd_send_char>
	}while(*message!='\0');
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f4      	bne.n	8000bb0 <lcd_print_string+0x8>
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <lcd_init>:

void lcd_init(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
	GPIO_Handle_t lcd_signal;
	memset(&lcd_signal,0,sizeof(lcd_signal));
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	220c      	movs	r2, #12
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 f8cc 	bl	8001d7a <memset>
	lcd_signal.pGPIOx=LCD_GPIO_PORT;
 8000be2:	4b42      	ldr	r3, [pc, #264]	; (8000cec <lcd_init+0x11c>)
 8000be4:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 8000be6:	2301      	movs	r3, #1
 8000be8:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_RS;
 8000bea:	2300      	movs	r3, #0
 8000bec:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	72bb      	strb	r3, [r7, #10]
	//RS PIN
	GPIO_Init(&lcd_signal);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fa17 	bl	8001030 <GPIO_Init>
	//RW PIN
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_RW;
 8000c02:	2301      	movs	r3, #1
 8000c04:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fa11 	bl	8001030 <GPIO_Init>
	//EN PIN
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_EN;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 fa0b 	bl	8001030 <GPIO_Init>
	//D4 PIN
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D4;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa05 	bl	8001030 <GPIO_Init>
	//D5 PIN
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D5;
 8000c26:	2304      	movs	r3, #4
 8000c28:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f9ff 	bl	8001030 <GPIO_Init>
	//D6 PIN
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D6;
 8000c32:	2305      	movs	r3, #5
 8000c34:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f9f9 	bl	8001030 <GPIO_Init>
	//D7 PIN
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D7;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f9f3 	bl	8001030 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4827      	ldr	r0, [pc, #156]	; (8000cec <lcd_init+0x11c>)
 8000c50:	f000 fba0 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4824      	ldr	r0, [pc, #144]	; (8000cec <lcd_init+0x11c>)
 8000c5a:	f000 fb9b 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	4822      	ldr	r0, [pc, #136]	; (8000cec <lcd_init+0x11c>)
 8000c64:	f000 fb96 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	481f      	ldr	r0, [pc, #124]	; (8000cec <lcd_init+0x11c>)
 8000c6e:	f000 fb91 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2104      	movs	r1, #4
 8000c76:	481d      	ldr	r0, [pc, #116]	; (8000cec <lcd_init+0x11c>)
 8000c78:	f000 fb8c 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2105      	movs	r1, #5
 8000c80:	481a      	ldr	r0, [pc, #104]	; (8000cec <lcd_init+0x11c>)
 8000c82:	f000 fb87 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2106      	movs	r1, #6
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <lcd_init+0x11c>)
 8000c8c:	f000 fb82 	bl	8001394 <GPIO_WriteToOutputPin>

	/**************************LCD INITIALIZING******************************/

	mdelay(40);
 8000c90:	2028      	movs	r0, #40	; 0x28
 8000c92:	f000 f8ad 	bl	8000df0 <mdelay>

	//RS=0 FOR LCD COMMAND
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <lcd_init+0x11c>)
 8000c9c:	f000 fb7a 	bl	8001394 <GPIO_WriteToOutputPin>

	//RW SET 0 TO WRINTG TO LCD
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <lcd_init+0x11c>)
 8000ca6:	f000 fb75 	bl	8001394 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f000 f848 	bl	8000d40 <write_4_bits>

	mdelay(5);
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f000 f89d 	bl	8000df0 <mdelay>

	write_4_bits(0x3);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f842 	bl	8000d40 <write_4_bits>

	udelay(150);
 8000cbc:	2096      	movs	r0, #150	; 0x96
 8000cbe:	f000 f8b0 	bl	8000e22 <udelay>

	write_4_bits(0x3);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f83c 	bl	8000d40 <write_4_bits>

	write_4_bits(0x2);
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f000 f839 	bl	8000d40 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000cce:	2028      	movs	r0, #40	; 0x28
 8000cd0:	f7ff ff26 	bl	8000b20 <lcd_send_command>

	//display on and cursor on
	lcd_send_command(LCD_CMD_DON_CURON);
 8000cd4:	200e      	movs	r0, #14
 8000cd6:	f7ff ff23 	bl	8000b20 <lcd_send_command>

	//display clear
	lcd_display_clear();
 8000cda:	f000 f87f 	bl	8000ddc <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000cde:	2006      	movs	r0, #6
 8000ce0:	f7ff ff1e 	bl	8000b20 <lcd_send_command>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
  column--;
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	71bb      	strb	r3, [r7, #6]
  switch (row)
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d002      	beq.n	8000d12 <lcd_set_cursor+0x22>
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d009      	beq.n	8000d24 <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000d10:	e011      	b.n	8000d36 <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	71bb      	strb	r3, [r7, #6]
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff feff 	bl	8000b20 <lcd_send_command>
      break;
 8000d22:	e008      	b.n	8000d36 <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d2a:	71bb      	strb	r3, [r7, #6]
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fef6 	bl	8000b20 <lcd_send_command>
      break;
 8000d34:	bf00      	nop
  }
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <write_4_bits>:


static void write_4_bits(uint8_t data){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((data>>0)&0x01));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	2103      	movs	r1, #3
 8000d56:	4815      	ldr	r0, [pc, #84]	; (8000dac <write_4_bits+0x6c>)
 8000d58:	f000 fb1c 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((data>>1)&0x01));
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	085b      	lsrs	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <write_4_bits+0x6c>)
 8000d6e:	f000 fb11 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((data>>2)&0x01));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2105      	movs	r1, #5
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <write_4_bits+0x6c>)
 8000d84:	f000 fb06 	bl	8001394 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((data>>3)&0x01));
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	2106      	movs	r1, #6
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <write_4_bits+0x6c>)
 8000d9a:	f000 fafb 	bl	8001394 <GPIO_WriteToOutputPin>

	lcd_enable();
 8000d9e:	f000 f807 	bl	8000db0 <lcd_enable>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40020c00 	.word	0x40020c00

08000db0 <lcd_enable>:

static void lcd_enable(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2102      	movs	r1, #2
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <lcd_enable+0x28>)
 8000dba:	f000 faeb 	bl	8001394 <GPIO_WriteToOutputPin>
	udelay(10);
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f000 f82f 	bl	8000e22 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <lcd_enable+0x28>)
 8000dca:	f000 fae3 	bl	8001394 <GPIO_WriteToOutputPin>
	udelay(100);
 8000dce:	2064      	movs	r0, #100	; 0x64
 8000dd0:	f000 f827 	bl	8000e22 <udelay>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40020c00 	.word	0x40020c00

08000ddc <lcd_display_clear>:

void lcd_display_clear(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff fe9d 	bl	8000b20 <lcd_send_command>
	mdelay(2);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f000 f802 	bl	8000df0 <mdelay>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <mdelay>:

static void mdelay(uint32_t value){
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<(value*1000);i++);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e002      	b.n	8000e04 <mdelay+0x14>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3f4      	bcc.n	8000dfe <mdelay+0xe>
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <udelay>:
static void udelay(uint32_t value){
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<(value*1);i++);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	e002      	b.n	8000e36 <udelay+0x14>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3f8      	bcc.n	8000e30 <udelay+0xe>
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <lcd_display_return_home>:

void lcd_display_return_home(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff fe65 	bl	8000b20 <lcd_send_command>
	mdelay(2);
 8000e56:	2002      	movs	r0, #2
 8000e58:	f7ff ffca 	bl	8000df0 <mdelay>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == Enable){
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d162      	bne.n	8000f38 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a64      	ldr	r2, [pc, #400]	; (8001008 <GPIO_PeriClockControl+0x1a8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d106      	bne.n	8000e88 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000e7a:	4b64      	ldr	r3, [pc, #400]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a63      	ldr	r2, [pc, #396]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
		}else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}

}
 8000e86:	e0b9      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB){
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a61      	ldr	r2, [pc, #388]	; (8001010 <GPIO_PeriClockControl+0x1b0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d106      	bne.n	8000e9e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e90:	4b5e      	ldr	r3, [pc, #376]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a5d      	ldr	r2, [pc, #372]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e9c:	e0ae      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC){
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a5c      	ldr	r2, [pc, #368]	; (8001014 <GPIO_PeriClockControl+0x1b4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d106      	bne.n	8000eb4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000ea6:	4b59      	ldr	r3, [pc, #356]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a58      	ldr	r2, [pc, #352]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eb2:	e0a3      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a58      	ldr	r2, [pc, #352]	; (8001018 <GPIO_PeriClockControl+0x1b8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d106      	bne.n	8000eca <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000ebc:	4b53      	ldr	r3, [pc, #332]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a52      	ldr	r2, [pc, #328]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec8:	e098      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE){
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a53      	ldr	r2, [pc, #332]	; (800101c <GPIO_PeriClockControl+0x1bc>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d106      	bne.n	8000ee0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ede:	e08d      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF){
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <GPIO_PeriClockControl+0x1c0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d106      	bne.n	8000ef6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ee8:	4b48      	ldr	r3, [pc, #288]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a47      	ldr	r2, [pc, #284]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000eee:	f043 0320 	orr.w	r3, r3, #32
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef4:	e082      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG){
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4a      	ldr	r2, [pc, #296]	; (8001024 <GPIO_PeriClockControl+0x1c4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d106      	bne.n	8000f0c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a42      	ldr	r2, [pc, #264]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f0a:	e077      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a46      	ldr	r2, [pc, #280]	; (8001028 <GPIO_PeriClockControl+0x1c8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d106      	bne.n	8000f22 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000f14:	4b3d      	ldr	r3, [pc, #244]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a3c      	ldr	r2, [pc, #240]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f20:	e06c      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a41      	ldr	r2, [pc, #260]	; (800102c <GPIO_PeriClockControl+0x1cc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d168      	bne.n	8000ffc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a37      	ldr	r2, [pc, #220]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f36:	e061      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <GPIO_PeriClockControl+0x1a8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d106      	bne.n	8000f4e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a31      	ldr	r2, [pc, #196]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f4c:	e056      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB){
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <GPIO_PeriClockControl+0x1b0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d106      	bne.n	8000f64 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f5c:	f023 0302 	bic.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f62:	e04b      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a2b      	ldr	r2, [pc, #172]	; (8001014 <GPIO_PeriClockControl+0x1b4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d106      	bne.n	8000f7a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f72:	f023 0304 	bic.w	r3, r3, #4
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f78:	e040      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <GPIO_PeriClockControl+0x1b8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d106      	bne.n	8000f90 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a21      	ldr	r2, [pc, #132]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f88:	f023 0308 	bic.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f8e:	e035      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <GPIO_PeriClockControl+0x1bc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d106      	bne.n	8000fa6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000f9e:	f023 0310 	bic.w	r3, r3, #16
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa4:	e02a      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF){
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <GPIO_PeriClockControl+0x1c0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d106      	bne.n	8000fbc <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000fb4:	f023 0320 	bic.w	r3, r3, #32
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fba:	e01f      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <GPIO_PeriClockControl+0x1c4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d106      	bne.n	8000fd2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd0:	e014      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <GPIO_PeriClockControl+0x1c8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d106      	bne.n	8000fe8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fe6:	e009      	b.n	8000ffc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI){
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <GPIO_PeriClockControl+0x1cc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d105      	bne.n	8000ffc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <GPIO_PeriClockControl+0x1ac>)
 8000ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40020000 	.word	0x40020000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	40021c00 	.word	0x40021c00
 800102c:	40022000 	.word	0x40022000

08001030 <GPIO_Init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, Enable);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff0e 	bl	8000e60 <GPIO_PeriClockControl>
	uint32_t temp=0;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]

	//1.Configure the GPIO MODE PIN

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	795b      	ldrb	r3, [r3, #5]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d822      	bhi.n	8001096 <GPIO_Init+0x66>
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	795b      	ldrb	r3, [r3, #5]
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	791b      	ldrb	r3, [r3, #4]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER&=~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2103      	movs	r1, #3
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER|=temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
		temp=0;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e0d4      	b.n	8001240 <GPIO_Init+0x210>
	}else{
		SYSCFG_PCLK_EN();//ENABLES THE APB2 BUS
 8001096:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <GPIO_Init+0x1a8>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <GPIO_Init+0x1a8>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
		//This part will contain the interrupts part
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT){
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	795b      	ldrb	r3, [r3, #5]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d117      	bne.n	80010da <GPIO_Init+0xaa>
			//Configure FTSR
			EXTI->FTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010aa:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <GPIO_Init+0x1ac>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	7912      	ldrb	r2, [r2, #4]
 80010b2:	4611      	mov	r1, r2
 80010b4:	2201      	movs	r2, #1
 80010b6:	408a      	lsls	r2, r1
 80010b8:	4611      	mov	r1, r2
 80010ba:	4a48      	ldr	r2, [pc, #288]	; (80011dc <GPIO_Init+0x1ac>)
 80010bc:	430b      	orrs	r3, r1
 80010be:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR&=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <GPIO_Init+0x1ac>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	7912      	ldrb	r2, [r2, #4]
 80010c8:	4611      	mov	r1, r2
 80010ca:	2201      	movs	r2, #1
 80010cc:	408a      	lsls	r2, r1
 80010ce:	43d2      	mvns	r2, r2
 80010d0:	4611      	mov	r1, r2
 80010d2:	4a42      	ldr	r2, [pc, #264]	; (80011dc <GPIO_Init+0x1ac>)
 80010d4:	400b      	ands	r3, r1
 80010d6:	6093      	str	r3, [r2, #8]
 80010d8:	e035      	b.n	8001146 <GPIO_Init+0x116>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	795b      	ldrb	r3, [r3, #5]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d117      	bne.n	8001112 <GPIO_Init+0xe2>
			//Configure RTSR
			EXTI->RTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e2:	4b3e      	ldr	r3, [pc, #248]	; (80011dc <GPIO_Init+0x1ac>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	7912      	ldrb	r2, [r2, #4]
 80010ea:	4611      	mov	r1, r2
 80010ec:	2201      	movs	r2, #1
 80010ee:	408a      	lsls	r2, r1
 80010f0:	4611      	mov	r1, r2
 80010f2:	4a3a      	ldr	r2, [pc, #232]	; (80011dc <GPIO_Init+0x1ac>)
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR&=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <GPIO_Init+0x1ac>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	7912      	ldrb	r2, [r2, #4]
 8001100:	4611      	mov	r1, r2
 8001102:	2201      	movs	r2, #1
 8001104:	408a      	lsls	r2, r1
 8001106:	43d2      	mvns	r2, r2
 8001108:	4611      	mov	r1, r2
 800110a:	4a34      	ldr	r2, [pc, #208]	; (80011dc <GPIO_Init+0x1ac>)
 800110c:	400b      	ands	r3, r1
 800110e:	60d3      	str	r3, [r2, #12]
 8001110:	e019      	b.n	8001146 <GPIO_Init+0x116>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d115      	bne.n	8001146 <GPIO_Init+0x116>
			//Configure FTSR AND RTSR
			EXTI->FTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <GPIO_Init+0x1ac>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	7912      	ldrb	r2, [r2, #4]
 8001122:	4611      	mov	r1, r2
 8001124:	2201      	movs	r2, #1
 8001126:	408a      	lsls	r2, r1
 8001128:	4611      	mov	r1, r2
 800112a:	4a2c      	ldr	r2, [pc, #176]	; (80011dc <GPIO_Init+0x1ac>)
 800112c:	430b      	orrs	r3, r1
 800112e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <GPIO_Init+0x1ac>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	7912      	ldrb	r2, [r2, #4]
 8001138:	4611      	mov	r1, r2
 800113a:	2201      	movs	r2, #1
 800113c:	408a      	lsls	r2, r1
 800113e:	4611      	mov	r1, r2
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <GPIO_Init+0x1ac>)
 8001142:	430b      	orrs	r3, r1
 8001144:	6093      	str	r3, [r2, #8]
		}
		// CONFIGURE SYSCONFIG
		uint8_t exticfg_num=(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	72fb      	strb	r3, [r7, #11]
		uint8_t exticfg_prt=(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode= GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <GPIO_Init+0x1b0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d050      	beq.n	8001204 <GPIO_Init+0x1d4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <GPIO_Init+0x1b4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d032      	beq.n	80011d2 <GPIO_Init+0x1a2>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <GPIO_Init+0x1b8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <GPIO_Init+0x19e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <GPIO_Init+0x1bc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d024      	beq.n	80011ca <GPIO_Init+0x19a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <GPIO_Init+0x1c0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01d      	beq.n	80011c6 <GPIO_Init+0x196>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <GPIO_Init+0x1c4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d016      	beq.n	80011c2 <GPIO_Init+0x192>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <GPIO_Init+0x1c8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00f      	beq.n	80011be <GPIO_Init+0x18e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a16      	ldr	r2, [pc, #88]	; (80011fc <GPIO_Init+0x1cc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d008      	beq.n	80011ba <GPIO_Init+0x18a>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <GPIO_Init+0x1d0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <GPIO_Init+0x186>
 80011b2:	2308      	movs	r3, #8
 80011b4:	e027      	b.n	8001206 <GPIO_Init+0x1d6>
 80011b6:	2300      	movs	r3, #0
 80011b8:	e025      	b.n	8001206 <GPIO_Init+0x1d6>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e023      	b.n	8001206 <GPIO_Init+0x1d6>
 80011be:	2306      	movs	r3, #6
 80011c0:	e021      	b.n	8001206 <GPIO_Init+0x1d6>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e01f      	b.n	8001206 <GPIO_Init+0x1d6>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e01d      	b.n	8001206 <GPIO_Init+0x1d6>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e01b      	b.n	8001206 <GPIO_Init+0x1d6>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e019      	b.n	8001206 <GPIO_Init+0x1d6>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e017      	b.n	8001206 <GPIO_Init+0x1d6>
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013c00 	.word	0x40013c00
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	40022000 	.word	0x40022000
 8001204:	2300      	movs	r3, #0
 8001206:	727b      	strb	r3, [r7, #9]
		SYSCFG->EXTICR[exticfg_num]|=(portcode<<exticfg_prt*4);
 8001208:	4a60      	ldr	r2, [pc, #384]	; (800138c <GPIO_Init+0x35c>)
 800120a:	7afb      	ldrb	r3, [r7, #11]
 800120c:	3302      	adds	r3, #2
 800120e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001212:	7a79      	ldrb	r1, [r7, #9]
 8001214:	7abb      	ldrb	r3, [r7, #10]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4618      	mov	r0, r3
 800121e:	495b      	ldr	r1, [pc, #364]	; (800138c <GPIO_Init+0x35c>)
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	4302      	orrs	r2, r0
 8001224:	3302      	adds	r3, #2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//CONFIGURE EXTI IMR
		EXTI->IMR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800122a:	4b59      	ldr	r3, [pc, #356]	; (8001390 <GPIO_Init+0x360>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	7912      	ldrb	r2, [r2, #4]
 8001232:	4611      	mov	r1, r2
 8001234:	2201      	movs	r2, #1
 8001236:	408a      	lsls	r2, r1
 8001238:	4611      	mov	r1, r2
 800123a:	4a55      	ldr	r2, [pc, #340]	; (8001390 <GPIO_Init+0x360>)
 800123c:	430b      	orrs	r3, r1
 800123e:	6013      	str	r3, [r2, #0]
	}

	//2.Configure the speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	799b      	ldrb	r3, [r3, #6]
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR&=~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	791b      	ldrb	r3, [r3, #4]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2103      	movs	r1, #3
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR|=temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6899      	ldr	r1, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	430a      	orrs	r2, r1
 800127e:	609a      	str	r2, [r3, #8]
	temp=0;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

	//3.Configure the PUPDR

	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	79db      	ldrb	r3, [r3, #7]
 8001288:	461a      	mov	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR&=~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2103      	movs	r1, #3
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	400a      	ands	r2, r1
 80012b2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR|=temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68d9      	ldr	r1, [r3, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	60da      	str	r2, [r3, #12]
	temp=0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]

	//4.Configure the optype
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7a1b      	ldrb	r3, [r3, #8]
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	791b      	ldrb	r3, [r3, #4]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER&=~(0x1<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	4619      	mov	r1, r3
 80012e4:	2301      	movs	r3, #1
 80012e6:	408b      	lsls	r3, r1
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER|=temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	430a      	orrs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]
	temp=0;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]

	//5.Configure the altfn
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN){
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	795b      	ldrb	r3, [r3, #5]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d139      	bne.n	8001384 <GPIO_Init+0x354>
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7a5b      	ldrb	r3, [r3, #9]
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]&=~(0xF<<4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	7912      	ldrb	r2, [r2, #4]
 800132e:	08d2      	lsrs	r2, r2, #3
 8001330:	b2d0      	uxtb	r0, r2
 8001332:	4602      	mov	r2, r0
 8001334:	3208      	adds	r2, #8
 8001336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	210f      	movs	r1, #15
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	4619      	mov	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4011      	ands	r1, r2
 8001354:	f100 0208 	add.w	r2, r0, #8
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]|=temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	7912      	ldrb	r2, [r2, #4]
 8001364:	08d2      	lsrs	r2, r2, #3
 8001366:	b2d0      	uxtb	r0, r2
 8001368:	4602      	mov	r2, r0
 800136a:	3208      	adds	r2, #8
 800136c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4311      	orrs	r1, r2
 8001378:	f100 0208 	add.w	r2, r0, #8
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp=0;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]

	}



}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40013800 	.word	0x40013800
 8001390:	40013c00 	.word	0x40013c00

08001394 <GPIO_WriteToOutputPin>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber,uint8_t Value){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
 80013a0:	4613      	mov	r3, r2
 80013a2:	70bb      	strb	r3, [r7, #2]
	if(Value==GPIO_PIN_SET){
 80013a4:	78bb      	ldrb	r3, [r7, #2]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d109      	bne.n	80013be <GPIO_WriteToOutputPin+0x2a>
	pGPIOx->ODR|=(1<<PinNumber);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	78fa      	ldrb	r2, [r7, #3]
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]
	}else{
		pGPIOx->ODR&=~(1<<PinNumber);
	}
}
 80013bc:	e009      	b.n	80013d2 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR&=~(1<<PinNumber);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	78fa      	ldrb	r2, [r7, #3]
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	43d2      	mvns	r2, r2
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	615a      	str	r2, [r3, #20]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <I2C_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==Enable){
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d120      	bne.n	8001434 <I2C_PeriClockControl+0x54>
		if(pI2Cx==I2C1){I2C1_PCLK_EN();}
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <I2C_PeriClockControl+0xa0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d106      	bne.n	8001408 <I2C_PeriClockControl+0x28>
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <I2C_PeriClockControl+0xa4>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a21      	ldr	r2, [pc, #132]	; (8001484 <I2C_PeriClockControl+0xa4>)
 8001400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
	}else{
		if(pI2Cx==I2C1){I2C1_PCLK_DI();}
		else if(pI2Cx==I2C2){I2C2_PCLK_DI();}
		else if(pI2Cx==I2C3){I2C3_PCLK_DI();}
	}
}
 8001406:	e035      	b.n	8001474 <I2C_PeriClockControl+0x94>
		else if(pI2Cx==I2C2){I2C2_PCLK_EN();}
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <I2C_PeriClockControl+0xa8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d106      	bne.n	800141e <I2C_PeriClockControl+0x3e>
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <I2C_PeriClockControl+0xa4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <I2C_PeriClockControl+0xa4>)
 8001416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800141c:	e02a      	b.n	8001474 <I2C_PeriClockControl+0x94>
		else if(pI2Cx==I2C3){I2C3_PCLK_EN();}
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1a      	ldr	r2, [pc, #104]	; (800148c <I2C_PeriClockControl+0xac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d126      	bne.n	8001474 <I2C_PeriClockControl+0x94>
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <I2C_PeriClockControl+0xa4>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <I2C_PeriClockControl+0xa4>)
 800142c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001432:	e01f      	b.n	8001474 <I2C_PeriClockControl+0x94>
		if(pI2Cx==I2C1){I2C1_PCLK_DI();}
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <I2C_PeriClockControl+0xa0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d106      	bne.n	800144a <I2C_PeriClockControl+0x6a>
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <I2C_PeriClockControl+0xa4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <I2C_PeriClockControl+0xa4>)
 8001442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001448:	e014      	b.n	8001474 <I2C_PeriClockControl+0x94>
		else if(pI2Cx==I2C2){I2C2_PCLK_DI();}
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <I2C_PeriClockControl+0xa8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d106      	bne.n	8001460 <I2C_PeriClockControl+0x80>
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <I2C_PeriClockControl+0xa4>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <I2C_PeriClockControl+0xa4>)
 8001458:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800145e:	e009      	b.n	8001474 <I2C_PeriClockControl+0x94>
		else if(pI2Cx==I2C3){I2C3_PCLK_DI();}
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <I2C_PeriClockControl+0xac>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d105      	bne.n	8001474 <I2C_PeriClockControl+0x94>
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <I2C_PeriClockControl+0xa4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <I2C_PeriClockControl+0xa4>)
 800146e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40005400 	.word	0x40005400
 8001484:	40023800 	.word	0x40023800
 8001488:	40005800 	.word	0x40005800
 800148c:	40005c00 	.word	0x40005c00

08001490 <I2C_Init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	//START CLOCK
	I2C_PeriClockControl(pI2CHandle->pI2Cx, Enable);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff9e 	bl	80013e0 <I2C_PeriClockControl>
	//Configure ACK
	//uint32_t temp=pI2CHandle->I2C_Config.I2C_ACKControl;
	//pI2CHandle->pI2Cx->CR1|=(temp<<I2C_CR1_ACK);

	//Configure FREQ
	uint32_t temp=0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
	temp|=RCC_GetPCLK1Value()/1000000U;
 80014a8:	f000 fa14 	bl	80018d4 <RCC_GetPCLK1Value>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <I2C_Init+0xb8>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2=(temp&0x3F);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014c6:	605a      	str	r2, [r3, #4]

	//program the device own address
	temp=pI2CHandle->I2C_Config.I2C_DeviceAddress<<1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7a1b      	ldrb	r3, [r3, #8]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1|=(1<<14);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014de:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1|=temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]

	//CALCULATE CCR
	uint16_t ccr_value=0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	817b      	strh	r3, [r7, #10]
	if(pI2CHandle->I2C_Config.I2C_FMDutyCycle<=I2C_SCL_SPEED_SM){
		ccr_value=RCC_GetPCLK1Value()/(2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80014f4:	f000 f9ee 	bl	80018d4 <RCC_GetPCLK1Value>
 80014f8:	4602      	mov	r2, r0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fbb2 f3f3 	udiv	r3, r2, r3
 8001504:	817b      	strh	r3, [r7, #10]
		pI2CHandle->pI2Cx->CCR|=(ccr_value&0xfff);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69d9      	ldr	r1, [r3, #28]
 800150c:	897b      	ldrh	r3, [r7, #10]
 800150e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	61da      	str	r2, [r3, #28]
			pI2CHandle->pI2Cx->CCR|=(ccr_value&0xfff);
		}
	}
	//configure TRISE
	if(pI2CHandle->I2C_Config.I2C_FMDutyCycle<=I2C_SCL_SPEED_SM){
		temp=0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
		temp=(RCC_GetPCLK1Value()/1000000U)+1;
 800151e:	f000 f9d9 	bl	80018d4 <RCC_GetPCLK1Value>
 8001522:	4603      	mov	r3, r0
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <I2C_Init+0xb8>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
	}else{
		temp=0;
		temp=(RCC_GetPCLK1Value()*3/10000000U)+1;
	}
	pI2CHandle->pI2Cx->TRISE|=(temp<<0);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6a19      	ldr	r1, [r3, #32]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	430a      	orrs	r2, r1
 800153e:	621a      	str	r2, [r3, #32]

}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	431bde83 	.word	0x431bde83

0800154c <I2C_MasterSendData>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer,uint32_t Len,uint8_t SlaveAddr,uint8_t Sr){
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	70fb      	strb	r3, [r7, #3]
	//Generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f913 	bl	800178a <I2C_GenerateStartCondition>

	//Wait until communication has started
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG)));
 8001564:	bf00      	nop
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2101      	movs	r1, #1
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f994 	bl	800189a <I2C_GetFlagStatus>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f6      	beq.n	8001566 <I2C_MasterSendData+0x1a>

	//Send address of slave and r/nw bit

	I2C_ExecuteAddressPhaseW(pI2CHandle->pI2Cx,SlaveAddr);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	78fa      	ldrb	r2, [r7, #3]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f8d6 	bl	8001732 <I2C_ExecuteAddressPhaseW>

	//Confirm the ADDR to confirm the address phase

	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG)));
 8001586:	bf00      	nop
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f983 	bl	800189a <I2C_GetFlagStatus>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f6      	beq.n	8001588 <I2C_MasterSendData+0x3c>

	//CLEAR ADDR BIT TO PREVENT CLOCK STRETCHING

	I2C_ClearADDRFlag(pI2CHandle);
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f915 	bl	80017ca <I2C_ClearADDRFlag>

	//SENDING THE DATA

	while(Len>0){
 80015a0:	e014      	b.n	80015cc <I2C_MasterSendData+0x80>
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)));
 80015a2:	bf00      	nop
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f975 	bl	800189a <I2C_GetFlagStatus>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f6      	beq.n	80015a4 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR=*pTxbuffer;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
		Len--;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
	while(Len>0){
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1e7      	bne.n	80015a2 <I2C_MasterSendData+0x56>
	}

	//WAITING OF SETTED BTF AND TXE FLAGS TO CLOSE THE COMMUNICATION
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)));
 80015d2:	bf00      	nop
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f95d 	bl	800189a <I2C_GetFlagStatus>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f6      	beq.n	80015d4 <I2C_MasterSendData+0x88>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG)));
 80015e6:	bf00      	nop
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2104      	movs	r1, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f953 	bl	800189a <I2C_GetFlagStatus>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f6      	beq.n	80015e8 <I2C_MasterSendData+0x9c>

	//Generate Stop Condition
	if(Sr==I2C_DISABLE_SR){
 80015fa:	7e3b      	ldrb	r3, [r7, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <I2C_MasterSendData+0xbe>
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f8d0 	bl	80017aa <I2C_GenerateStopCondition>
	}

}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <I2C_MasterReceiveData>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxbuffer,uint32_t Len,uint8_t SlaveAddr,uint8_t Sr){
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	70fb      	strb	r3, [r7, #3]
	//Generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f8b0 	bl	800178a <I2C_GenerateStartCondition>

	//Wait until communication has started
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG)));
 800162a:	bf00      	nop
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f931 	bl	800189a <I2C_GetFlagStatus>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f6      	beq.n	800162c <I2C_MasterReceiveData+0x1a>

	//Send address of slave and r/nw bit
	I2C_ExecuteAddressPhaseR(pI2CHandle->pI2Cx,SlaveAddr);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f889 	bl	800175e <I2C_ExecuteAddressPhaseR>

	//Confirm the ADDR to confirm the address phase
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG)));
 800164c:	bf00      	nop
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2102      	movs	r1, #2
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f920 	bl	800189a <I2C_GetFlagStatus>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f6      	beq.n	800164e <I2C_MasterReceiveData+0x3c>

	if(Len==1){
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d122      	bne.n	80016ac <I2C_MasterReceiveData+0x9a>
		//GENERATE NACK
		pI2CHandle->pI2Cx->CR1&=~(1<<I2C_CR1_ACK);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001674:	601a      	str	r2, [r3, #0]

		//CLEAR ADDR BIT TO PREVENT CLOCK STRETCHING
		I2C_ClearADDRFlag(pI2CHandle);
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f8a7 	bl	80017ca <I2C_ClearADDRFlag>

		//wait until RXNE=1
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG)));
 800167c:	bf00      	nop
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f908 	bl	800189a <I2C_GetFlagStatus>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f6      	beq.n	800167e <I2C_MasterReceiveData+0x6c>

		//Generate Stop Condition
		if(Sr==I2C_DISABLE_SR){
 8001690:	7e3b      	ldrb	r3, [r7, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d104      	bne.n	80016a0 <I2C_MasterReceiveData+0x8e>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f885 	bl	80017aa <I2C_GenerateStopCondition>
		}

		//Get the data
		*pRxbuffer=pI2CHandle->pI2Cx->DR;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	701a      	strb	r2, [r3, #0]
	}

	//Reading data
	if(Len>1){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d92f      	bls.n	8001712 <I2C_MasterReceiveData+0x100>
		//CLEAR ADDR BIT TO PREVENT CLOCK STRETCHING
		I2C_ClearADDRFlag(pI2CHandle);
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f889 	bl	80017ca <I2C_ClearADDRFlag>
		while(Len>0){
 80016b8:	e028      	b.n	800170c <I2C_MasterReceiveData+0xfa>
			//wait until RXNE=1
			while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG)));
 80016ba:	bf00      	nop
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2140      	movs	r1, #64	; 0x40
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f8e9 	bl	800189a <I2C_GetFlagStatus>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f6      	beq.n	80016bc <I2C_MasterReceiveData+0xaa>

			*pRxbuffer=pI2CHandle->pI2Cx->DR;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	701a      	strb	r2, [r3, #0]
			pRxbuffer++;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
			if(Len==2){
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d10f      	bne.n	8001706 <I2C_MasterReceiveData+0xf4>
			//GENERATE NACK
			pI2CHandle->pI2Cx->CR1&=~(1<<I2C_CR1_ACK);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f4:	601a      	str	r2, [r3, #0]
			//Generate Stop Condition
			if(Sr==I2C_DISABLE_SR){
 80016f6:	7e3b      	ldrb	r3, [r7, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d104      	bne.n	8001706 <I2C_MasterReceiveData+0xf4>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f852 	bl	80017aa <I2C_GenerateStopCondition>
			}
			}
			Len--;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3b01      	subs	r3, #1
 800170a:	607b      	str	r3, [r7, #4]
		while(Len>0){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1d3      	bne.n	80016ba <I2C_MasterReceiveData+0xa8>
		}
	}

	//Re-enable ACK
	if(pI2CHandle->I2C_Config.I2C_ACKControl==I2C_ACK_ENABLE){pI2CHandle->pI2Cx->CR1|=(1<<I2C_CR1_ACK);}
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	7a5b      	ldrb	r3, [r3, #9]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <I2C_MasterReceiveData+0x118>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001728:	601a      	str	r2, [r3, #0]

}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <I2C_ExecuteAddressPhaseW>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
static void I2C_ExecuteAddressPhaseW(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr){
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr=SlaveAddr<<1;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	70fb      	strb	r3, [r7, #3]
	SlaveAddr&=~(1);
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <I2C_ExecuteAddressPhaseR>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
static void I2C_ExecuteAddressPhaseR(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr){
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	70fb      	strb	r3, [r7, #3]
	SlaveAddr=SlaveAddr<<1;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr|=(1);
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <I2C_GenerateStartCondition>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1|=(1<<I2C_CR1_START);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	601a      	str	r2, [r3, #0]

}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <I2C_GenerateStopCondition>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1|=(1<<I2C_CR1_STOP);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	601a      	str	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <I2C_ClearADDRFlag>:
 * @return            -  none
 *
 * @Note              -  ADDR flags is set when address phase is completed successfully
 * 						FOR MORE INFORMATİON PLEASE REFER TO REFERENCE MANUAL
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	uint32_t dummyread=0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->pI2Cx->SR2&(1<<I2C_SR2_MSL)){
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d02a      	beq.n	800183a <I2C_ClearADDRFlag+0x70>
		if(pI2CHandle->TxRxState==I2C_BUSY_IN_RX){
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7f1b      	ldrb	r3, [r3, #28]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d11d      	bne.n	8001828 <I2C_ClearADDRFlag+0x5e>
			if(pI2CHandle->RxSize==1){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d110      	bne.n	8001816 <I2C_ClearADDRFlag+0x4c>
				//DISABLE ACK
				pI2CHandle->pI2Cx->CR1&=~(1<<I2C_CR1_ACK);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001802:	601a      	str	r2, [r3, #0]
				//CLEAR ADDR
				dummyread=pI2CHandle->pI2Cx->SR1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	60fb      	str	r3, [r7, #12]
				dummyread=pI2CHandle->pI2Cx->SR2;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	60fb      	str	r3, [r7, #12]
	}else{
	dummyread=pI2CHandle->pI2Cx->SR1;
	dummyread=pI2CHandle->pI2Cx->SR2;
	(void)dummyread;
	}
}
 8001814:	e019      	b.n	800184a <I2C_ClearADDRFlag+0x80>
				dummyread=pI2CHandle->pI2Cx->SR1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	60fb      	str	r3, [r7, #12]
				dummyread=pI2CHandle->pI2Cx->SR2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	60fb      	str	r3, [r7, #12]
}
 8001826:	e010      	b.n	800184a <I2C_ClearADDRFlag+0x80>
			dummyread=pI2CHandle->pI2Cx->SR1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	60fb      	str	r3, [r7, #12]
			dummyread=pI2CHandle->pI2Cx->SR2;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	60fb      	str	r3, [r7, #12]
}
 8001838:	e007      	b.n	800184a <I2C_ClearADDRFlag+0x80>
	dummyread=pI2CHandle->pI2Cx->SR1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	60fb      	str	r3, [r7, #12]
	dummyread=pI2CHandle->pI2Cx->SR2;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	60fb      	str	r3, [r7, #12]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <I2C_PeripheralControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi){
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==Enable){pI2Cx->CR1|=(1<<I2C_CR1_PE);}
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d106      	bne.n	8001876 <I2C_PeripheralControl+0x20>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e005      	b.n	8001882 <I2C_PeripheralControl+0x2c>
	else{pI2Cx->CR1&=~(1<<I2C_CR1_PE);}
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0201 	bic.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
	//Configure ACK
	pI2Cx->CR1|=(1<<I2C_CR1_ACK);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <I2C_GetFlagStatus>:
 *
 * @return            -  FLAG SITUATION
 *
 * @Note              -  none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx,uint32_t FlagName){
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 &FlagName){return FLAG_SET;}
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <I2C_GetFlagStatus+0x1a>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <I2C_GetFlagStatus+0x1c>
	else{return FLAG_RESET;}
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <RCC_GetPLLValue>:

//BUS PRESCALERS
uint16_t AHB_PreScaler[8]={2,4,8,16,64,128,256,512};
uint8_t APBLow_PreScaler[4]={2,4,8,16};

uint32_t RCC_GetPLLValue(void){
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
	return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <RCC_GetPCLK1Value>:
 * @return            -  Frequency of APB1 bus
 *
 * @Note              -  If you want to learn calculations of getting frequency from bus
 * 						Please refer to REFERENCE MANUAL PAGE 216, CLOCK TREE
 */
uint32_t RCC_GetPCLK1Value(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
	uint32_t baseclk=0;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
	uint32_t pclk1;
	uint8_t clksws=0,ahbpr,temp,apbpr;
 80018de:	2300      	movs	r3, #0
 80018e0:	727b      	strb	r3, [r7, #9]
	clksws=(RCC->CFGR>>2)&0x3;
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <RCC_GetPCLK1Value+0xa8>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	727b      	strb	r3, [r7, #9]
	if(clksws==0){baseclk=16000000;}
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <RCC_GetPCLK1Value+0x28>
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <RCC_GetPCLK1Value+0xac>)
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e00b      	b.n	8001914 <RCC_GetPCLK1Value+0x40>
	else if(clksws==1){baseclk=8000000;}
 80018fc:	7a7b      	ldrb	r3, [r7, #9]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <RCC_GetPCLK1Value+0x34>
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <RCC_GetPCLK1Value+0xb0>)
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e005      	b.n	8001914 <RCC_GetPCLK1Value+0x40>
	else if(clksws==2){baseclk=RCC_GetPLLValue();}
 8001908:	7a7b      	ldrb	r3, [r7, #9]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d102      	bne.n	8001914 <RCC_GetPCLK1Value+0x40>
 800190e:	f7ff ffd8 	bl	80018c2 <RCC_GetPLLValue>
 8001912:	60f8      	str	r0, [r7, #12]
	//calculate ahb prescaler
	temp=(RCC->CFGR>>4)&0xF;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <RCC_GetPCLK1Value+0xa8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	723b      	strb	r3, [r7, #8]
	if(temp<8){ahbpr=1;}
 8001922:	7a3b      	ldrb	r3, [r7, #8]
 8001924:	2b07      	cmp	r3, #7
 8001926:	d802      	bhi.n	800192e <RCC_GetPCLK1Value+0x5a>
 8001928:	2301      	movs	r3, #1
 800192a:	72fb      	strb	r3, [r7, #11]
 800192c:	e005      	b.n	800193a <RCC_GetPCLK1Value+0x66>
	else{ahbpr=AHB_PreScaler[temp-8];}
 800192e:	7a3b      	ldrb	r3, [r7, #8]
 8001930:	3b08      	subs	r3, #8
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <RCC_GetPCLK1Value+0xb4>)
 8001934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001938:	72fb      	strb	r3, [r7, #11]

	//calculate apb1 prescaler
	temp=(RCC->CFGR>>10)&0x7;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <RCC_GetPCLK1Value+0xa8>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	723b      	strb	r3, [r7, #8]
	if(temp<4){apbpr=1;}
 8001948:	7a3b      	ldrb	r3, [r7, #8]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d802      	bhi.n	8001954 <RCC_GetPCLK1Value+0x80>
 800194e:	2301      	movs	r3, #1
 8001950:	72bb      	strb	r3, [r7, #10]
 8001952:	e005      	b.n	8001960 <RCC_GetPCLK1Value+0x8c>
	else{apbpr=AHB_PreScaler[temp-4];}
 8001954:	7a3b      	ldrb	r3, [r7, #8]
 8001956:	3b04      	subs	r3, #4
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <RCC_GetPCLK1Value+0xb4>)
 800195a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195e:	72bb      	strb	r3, [r7, #10]
	//lets calculate pclk1
	pclk1=(baseclk/ahbpr)/apbpr;
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	fbb2 f2f3 	udiv	r2, r2, r3
 8001968:	7abb      	ldrb	r3, [r7, #10]
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	607b      	str	r3, [r7, #4]
	return pclk1;
 8001970:	687b      	ldr	r3, [r7, #4]

}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200
 8001988:	20000000 	.word	0x20000000

0800198c <__errno>:
 800198c:	4b01      	ldr	r3, [pc, #4]	; (8001994 <__errno+0x8>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000010 	.word	0x20000010

08001998 <__sflush_r>:
 8001998:	898a      	ldrh	r2, [r1, #12]
 800199a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800199e:	4605      	mov	r5, r0
 80019a0:	0710      	lsls	r0, r2, #28
 80019a2:	460c      	mov	r4, r1
 80019a4:	d458      	bmi.n	8001a58 <__sflush_r+0xc0>
 80019a6:	684b      	ldr	r3, [r1, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	dc05      	bgt.n	80019b8 <__sflush_r+0x20>
 80019ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	dc02      	bgt.n	80019b8 <__sflush_r+0x20>
 80019b2:	2000      	movs	r0, #0
 80019b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ba:	2e00      	cmp	r6, #0
 80019bc:	d0f9      	beq.n	80019b2 <__sflush_r+0x1a>
 80019be:	2300      	movs	r3, #0
 80019c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019c4:	682f      	ldr	r7, [r5, #0]
 80019c6:	602b      	str	r3, [r5, #0]
 80019c8:	d032      	beq.n	8001a30 <__sflush_r+0x98>
 80019ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019cc:	89a3      	ldrh	r3, [r4, #12]
 80019ce:	075a      	lsls	r2, r3, #29
 80019d0:	d505      	bpl.n	80019de <__sflush_r+0x46>
 80019d2:	6863      	ldr	r3, [r4, #4]
 80019d4:	1ac0      	subs	r0, r0, r3
 80019d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019d8:	b10b      	cbz	r3, 80019de <__sflush_r+0x46>
 80019da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019dc:	1ac0      	subs	r0, r0, r3
 80019de:	2300      	movs	r3, #0
 80019e0:	4602      	mov	r2, r0
 80019e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019e4:	6a21      	ldr	r1, [r4, #32]
 80019e6:	4628      	mov	r0, r5
 80019e8:	47b0      	blx	r6
 80019ea:	1c43      	adds	r3, r0, #1
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	d106      	bne.n	80019fe <__sflush_r+0x66>
 80019f0:	6829      	ldr	r1, [r5, #0]
 80019f2:	291d      	cmp	r1, #29
 80019f4:	d82c      	bhi.n	8001a50 <__sflush_r+0xb8>
 80019f6:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <__sflush_r+0x108>)
 80019f8:	40ca      	lsrs	r2, r1
 80019fa:	07d6      	lsls	r6, r2, #31
 80019fc:	d528      	bpl.n	8001a50 <__sflush_r+0xb8>
 80019fe:	2200      	movs	r2, #0
 8001a00:	6062      	str	r2, [r4, #4]
 8001a02:	04d9      	lsls	r1, r3, #19
 8001a04:	6922      	ldr	r2, [r4, #16]
 8001a06:	6022      	str	r2, [r4, #0]
 8001a08:	d504      	bpl.n	8001a14 <__sflush_r+0x7c>
 8001a0a:	1c42      	adds	r2, r0, #1
 8001a0c:	d101      	bne.n	8001a12 <__sflush_r+0x7a>
 8001a0e:	682b      	ldr	r3, [r5, #0]
 8001a10:	b903      	cbnz	r3, 8001a14 <__sflush_r+0x7c>
 8001a12:	6560      	str	r0, [r4, #84]	; 0x54
 8001a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a16:	602f      	str	r7, [r5, #0]
 8001a18:	2900      	cmp	r1, #0
 8001a1a:	d0ca      	beq.n	80019b2 <__sflush_r+0x1a>
 8001a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a20:	4299      	cmp	r1, r3
 8001a22:	d002      	beq.n	8001a2a <__sflush_r+0x92>
 8001a24:	4628      	mov	r0, r5
 8001a26:	f000 f9b1 	bl	8001d8c <_free_r>
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8001a2e:	e7c1      	b.n	80019b4 <__sflush_r+0x1c>
 8001a30:	6a21      	ldr	r1, [r4, #32]
 8001a32:	2301      	movs	r3, #1
 8001a34:	4628      	mov	r0, r5
 8001a36:	47b0      	blx	r6
 8001a38:	1c41      	adds	r1, r0, #1
 8001a3a:	d1c7      	bne.n	80019cc <__sflush_r+0x34>
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0c4      	beq.n	80019cc <__sflush_r+0x34>
 8001a42:	2b1d      	cmp	r3, #29
 8001a44:	d001      	beq.n	8001a4a <__sflush_r+0xb2>
 8001a46:	2b16      	cmp	r3, #22
 8001a48:	d101      	bne.n	8001a4e <__sflush_r+0xb6>
 8001a4a:	602f      	str	r7, [r5, #0]
 8001a4c:	e7b1      	b.n	80019b2 <__sflush_r+0x1a>
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a54:	81a3      	strh	r3, [r4, #12]
 8001a56:	e7ad      	b.n	80019b4 <__sflush_r+0x1c>
 8001a58:	690f      	ldr	r7, [r1, #16]
 8001a5a:	2f00      	cmp	r7, #0
 8001a5c:	d0a9      	beq.n	80019b2 <__sflush_r+0x1a>
 8001a5e:	0793      	lsls	r3, r2, #30
 8001a60:	680e      	ldr	r6, [r1, #0]
 8001a62:	bf08      	it	eq
 8001a64:	694b      	ldreq	r3, [r1, #20]
 8001a66:	600f      	str	r7, [r1, #0]
 8001a68:	bf18      	it	ne
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	eba6 0807 	sub.w	r8, r6, r7
 8001a70:	608b      	str	r3, [r1, #8]
 8001a72:	f1b8 0f00 	cmp.w	r8, #0
 8001a76:	dd9c      	ble.n	80019b2 <__sflush_r+0x1a>
 8001a78:	6a21      	ldr	r1, [r4, #32]
 8001a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a7c:	4643      	mov	r3, r8
 8001a7e:	463a      	mov	r2, r7
 8001a80:	4628      	mov	r0, r5
 8001a82:	47b0      	blx	r6
 8001a84:	2800      	cmp	r0, #0
 8001a86:	dc06      	bgt.n	8001a96 <__sflush_r+0xfe>
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8e:	81a3      	strh	r3, [r4, #12]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	e78e      	b.n	80019b4 <__sflush_r+0x1c>
 8001a96:	4407      	add	r7, r0
 8001a98:	eba8 0800 	sub.w	r8, r8, r0
 8001a9c:	e7e9      	b.n	8001a72 <__sflush_r+0xda>
 8001a9e:	bf00      	nop
 8001aa0:	20400001 	.word	0x20400001

08001aa4 <_fflush_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	690b      	ldr	r3, [r1, #16]
 8001aa8:	4605      	mov	r5, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	b913      	cbnz	r3, 8001ab4 <_fflush_r+0x10>
 8001aae:	2500      	movs	r5, #0
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	b118      	cbz	r0, 8001abe <_fflush_r+0x1a>
 8001ab6:	6983      	ldr	r3, [r0, #24]
 8001ab8:	b90b      	cbnz	r3, 8001abe <_fflush_r+0x1a>
 8001aba:	f000 f899 	bl	8001bf0 <__sinit>
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <_fflush_r+0x6c>)
 8001ac0:	429c      	cmp	r4, r3
 8001ac2:	d11b      	bne.n	8001afc <_fflush_r+0x58>
 8001ac4:	686c      	ldr	r4, [r5, #4]
 8001ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0ef      	beq.n	8001aae <_fflush_r+0xa>
 8001ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ad0:	07d0      	lsls	r0, r2, #31
 8001ad2:	d404      	bmi.n	8001ade <_fflush_r+0x3a>
 8001ad4:	0599      	lsls	r1, r3, #22
 8001ad6:	d402      	bmi.n	8001ade <_fflush_r+0x3a>
 8001ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ada:	f000 f94c 	bl	8001d76 <__retarget_lock_acquire_recursive>
 8001ade:	4628      	mov	r0, r5
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	f7ff ff59 	bl	8001998 <__sflush_r>
 8001ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ae8:	07da      	lsls	r2, r3, #31
 8001aea:	4605      	mov	r5, r0
 8001aec:	d4e0      	bmi.n	8001ab0 <_fflush_r+0xc>
 8001aee:	89a3      	ldrh	r3, [r4, #12]
 8001af0:	059b      	lsls	r3, r3, #22
 8001af2:	d4dd      	bmi.n	8001ab0 <_fflush_r+0xc>
 8001af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001af6:	f000 f93f 	bl	8001d78 <__retarget_lock_release_recursive>
 8001afa:	e7d9      	b.n	8001ab0 <_fflush_r+0xc>
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <_fflush_r+0x70>)
 8001afe:	429c      	cmp	r4, r3
 8001b00:	d101      	bne.n	8001b06 <_fflush_r+0x62>
 8001b02:	68ac      	ldr	r4, [r5, #8]
 8001b04:	e7df      	b.n	8001ac6 <_fflush_r+0x22>
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <_fflush_r+0x74>)
 8001b08:	429c      	cmp	r4, r3
 8001b0a:	bf08      	it	eq
 8001b0c:	68ec      	ldreq	r4, [r5, #12]
 8001b0e:	e7da      	b.n	8001ac6 <_fflush_r+0x22>
 8001b10:	080024fc 	.word	0x080024fc
 8001b14:	0800251c 	.word	0x0800251c
 8001b18:	080024dc 	.word	0x080024dc

08001b1c <fflush>:
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	b920      	cbnz	r0, 8001b2a <fflush+0xe>
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <fflush+0x18>)
 8001b22:	4905      	ldr	r1, [pc, #20]	; (8001b38 <fflush+0x1c>)
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	f000 b8e1 	b.w	8001cec <_fwalk_reent>
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <fflush+0x20>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f7ff bfb9 	b.w	8001aa4 <_fflush_r>
 8001b32:	bf00      	nop
 8001b34:	0800253c 	.word	0x0800253c
 8001b38:	08001aa5 	.word	0x08001aa5
 8001b3c:	20000010 	.word	0x20000010

08001b40 <std>:
 8001b40:	2300      	movs	r3, #0
 8001b42:	b510      	push	{r4, lr}
 8001b44:	4604      	mov	r4, r0
 8001b46:	e9c0 3300 	strd	r3, r3, [r0]
 8001b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b4e:	6083      	str	r3, [r0, #8]
 8001b50:	8181      	strh	r1, [r0, #12]
 8001b52:	6643      	str	r3, [r0, #100]	; 0x64
 8001b54:	81c2      	strh	r2, [r0, #14]
 8001b56:	6183      	str	r3, [r0, #24]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	305c      	adds	r0, #92	; 0x5c
 8001b5e:	f000 f90c 	bl	8001d7a <memset>
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <std+0x38>)
 8001b64:	6263      	str	r3, [r4, #36]	; 0x24
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <std+0x3c>)
 8001b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <std+0x40>)
 8001b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <std+0x44>)
 8001b70:	6224      	str	r4, [r4, #32]
 8001b72:	6323      	str	r3, [r4, #48]	; 0x30
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	bf00      	nop
 8001b78:	08002059 	.word	0x08002059
 8001b7c:	0800207b 	.word	0x0800207b
 8001b80:	080020b3 	.word	0x080020b3
 8001b84:	080020d7 	.word	0x080020d7

08001b88 <_cleanup_r>:
 8001b88:	4901      	ldr	r1, [pc, #4]	; (8001b90 <_cleanup_r+0x8>)
 8001b8a:	f000 b8af 	b.w	8001cec <_fwalk_reent>
 8001b8e:	bf00      	nop
 8001b90:	08001aa5 	.word	0x08001aa5

08001b94 <__sfmoreglue>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	2268      	movs	r2, #104	; 0x68
 8001b98:	1e4d      	subs	r5, r1, #1
 8001b9a:	4355      	muls	r5, r2
 8001b9c:	460e      	mov	r6, r1
 8001b9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ba2:	f000 f95f 	bl	8001e64 <_malloc_r>
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	b140      	cbz	r0, 8001bbc <__sfmoreglue+0x28>
 8001baa:	2100      	movs	r1, #0
 8001bac:	e9c0 1600 	strd	r1, r6, [r0]
 8001bb0:	300c      	adds	r0, #12
 8001bb2:	60a0      	str	r0, [r4, #8]
 8001bb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bb8:	f000 f8df 	bl	8001d7a <memset>
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}

08001bc0 <__sfp_lock_acquire>:
 8001bc0:	4801      	ldr	r0, [pc, #4]	; (8001bc8 <__sfp_lock_acquire+0x8>)
 8001bc2:	f000 b8d8 	b.w	8001d76 <__retarget_lock_acquire_recursive>
 8001bc6:	bf00      	nop
 8001bc8:	200000d5 	.word	0x200000d5

08001bcc <__sfp_lock_release>:
 8001bcc:	4801      	ldr	r0, [pc, #4]	; (8001bd4 <__sfp_lock_release+0x8>)
 8001bce:	f000 b8d3 	b.w	8001d78 <__retarget_lock_release_recursive>
 8001bd2:	bf00      	nop
 8001bd4:	200000d5 	.word	0x200000d5

08001bd8 <__sinit_lock_acquire>:
 8001bd8:	4801      	ldr	r0, [pc, #4]	; (8001be0 <__sinit_lock_acquire+0x8>)
 8001bda:	f000 b8cc 	b.w	8001d76 <__retarget_lock_acquire_recursive>
 8001bde:	bf00      	nop
 8001be0:	200000d6 	.word	0x200000d6

08001be4 <__sinit_lock_release>:
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <__sinit_lock_release+0x8>)
 8001be6:	f000 b8c7 	b.w	8001d78 <__retarget_lock_release_recursive>
 8001bea:	bf00      	nop
 8001bec:	200000d6 	.word	0x200000d6

08001bf0 <__sinit>:
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	f7ff fff0 	bl	8001bd8 <__sinit_lock_acquire>
 8001bf8:	69a3      	ldr	r3, [r4, #24]
 8001bfa:	b11b      	cbz	r3, 8001c04 <__sinit+0x14>
 8001bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c00:	f7ff bff0 	b.w	8001be4 <__sinit_lock_release>
 8001c04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c08:	6523      	str	r3, [r4, #80]	; 0x50
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <__sinit+0x68>)
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <__sinit+0x6c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c12:	42a3      	cmp	r3, r4
 8001c14:	bf04      	itt	eq
 8001c16:	2301      	moveq	r3, #1
 8001c18:	61a3      	streq	r3, [r4, #24]
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 f820 	bl	8001c60 <__sfp>
 8001c20:	6060      	str	r0, [r4, #4]
 8001c22:	4620      	mov	r0, r4
 8001c24:	f000 f81c 	bl	8001c60 <__sfp>
 8001c28:	60a0      	str	r0, [r4, #8]
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f000 f818 	bl	8001c60 <__sfp>
 8001c30:	2200      	movs	r2, #0
 8001c32:	60e0      	str	r0, [r4, #12]
 8001c34:	2104      	movs	r1, #4
 8001c36:	6860      	ldr	r0, [r4, #4]
 8001c38:	f7ff ff82 	bl	8001b40 <std>
 8001c3c:	68a0      	ldr	r0, [r4, #8]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2109      	movs	r1, #9
 8001c42:	f7ff ff7d 	bl	8001b40 <std>
 8001c46:	68e0      	ldr	r0, [r4, #12]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	2112      	movs	r1, #18
 8001c4c:	f7ff ff78 	bl	8001b40 <std>
 8001c50:	2301      	movs	r3, #1
 8001c52:	61a3      	str	r3, [r4, #24]
 8001c54:	e7d2      	b.n	8001bfc <__sinit+0xc>
 8001c56:	bf00      	nop
 8001c58:	0800253c 	.word	0x0800253c
 8001c5c:	08001b89 	.word	0x08001b89

08001c60 <__sfp>:
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c62:	4607      	mov	r7, r0
 8001c64:	f7ff ffac 	bl	8001bc0 <__sfp_lock_acquire>
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <__sfp+0x84>)
 8001c6a:	681e      	ldr	r6, [r3, #0]
 8001c6c:	69b3      	ldr	r3, [r6, #24]
 8001c6e:	b913      	cbnz	r3, 8001c76 <__sfp+0x16>
 8001c70:	4630      	mov	r0, r6
 8001c72:	f7ff ffbd 	bl	8001bf0 <__sinit>
 8001c76:	3648      	adds	r6, #72	; 0x48
 8001c78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	d503      	bpl.n	8001c88 <__sfp+0x28>
 8001c80:	6833      	ldr	r3, [r6, #0]
 8001c82:	b30b      	cbz	r3, 8001cc8 <__sfp+0x68>
 8001c84:	6836      	ldr	r6, [r6, #0]
 8001c86:	e7f7      	b.n	8001c78 <__sfp+0x18>
 8001c88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c8c:	b9d5      	cbnz	r5, 8001cc4 <__sfp+0x64>
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <__sfp+0x88>)
 8001c90:	60e3      	str	r3, [r4, #12]
 8001c92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c96:	6665      	str	r5, [r4, #100]	; 0x64
 8001c98:	f000 f86c 	bl	8001d74 <__retarget_lock_init_recursive>
 8001c9c:	f7ff ff96 	bl	8001bcc <__sfp_lock_release>
 8001ca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ca4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ca8:	6025      	str	r5, [r4, #0]
 8001caa:	61a5      	str	r5, [r4, #24]
 8001cac:	2208      	movs	r2, #8
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cb4:	f000 f861 	bl	8001d7a <memset>
 8001cb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc4:	3468      	adds	r4, #104	; 0x68
 8001cc6:	e7d9      	b.n	8001c7c <__sfp+0x1c>
 8001cc8:	2104      	movs	r1, #4
 8001cca:	4638      	mov	r0, r7
 8001ccc:	f7ff ff62 	bl	8001b94 <__sfmoreglue>
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	6030      	str	r0, [r6, #0]
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	d1d5      	bne.n	8001c84 <__sfp+0x24>
 8001cd8:	f7ff ff78 	bl	8001bcc <__sfp_lock_release>
 8001cdc:	230c      	movs	r3, #12
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	e7ee      	b.n	8001cc0 <__sfp+0x60>
 8001ce2:	bf00      	nop
 8001ce4:	0800253c 	.word	0x0800253c
 8001ce8:	ffff0001 	.word	0xffff0001

08001cec <_fwalk_reent>:
 8001cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cf0:	4606      	mov	r6, r0
 8001cf2:	4688      	mov	r8, r1
 8001cf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cf8:	2700      	movs	r7, #0
 8001cfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cfe:	f1b9 0901 	subs.w	r9, r9, #1
 8001d02:	d505      	bpl.n	8001d10 <_fwalk_reent+0x24>
 8001d04:	6824      	ldr	r4, [r4, #0]
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d1f7      	bne.n	8001cfa <_fwalk_reent+0xe>
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d10:	89ab      	ldrh	r3, [r5, #12]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d907      	bls.n	8001d26 <_fwalk_reent+0x3a>
 8001d16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	d003      	beq.n	8001d26 <_fwalk_reent+0x3a>
 8001d1e:	4629      	mov	r1, r5
 8001d20:	4630      	mov	r0, r6
 8001d22:	47c0      	blx	r8
 8001d24:	4307      	orrs	r7, r0
 8001d26:	3568      	adds	r5, #104	; 0x68
 8001d28:	e7e9      	b.n	8001cfe <_fwalk_reent+0x12>
	...

08001d2c <__libc_init_array>:
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	4d0d      	ldr	r5, [pc, #52]	; (8001d64 <__libc_init_array+0x38>)
 8001d30:	4c0d      	ldr	r4, [pc, #52]	; (8001d68 <__libc_init_array+0x3c>)
 8001d32:	1b64      	subs	r4, r4, r5
 8001d34:	10a4      	asrs	r4, r4, #2
 8001d36:	2600      	movs	r6, #0
 8001d38:	42a6      	cmp	r6, r4
 8001d3a:	d109      	bne.n	8001d50 <__libc_init_array+0x24>
 8001d3c:	4d0b      	ldr	r5, [pc, #44]	; (8001d6c <__libc_init_array+0x40>)
 8001d3e:	4c0c      	ldr	r4, [pc, #48]	; (8001d70 <__libc_init_array+0x44>)
 8001d40:	f000 fb68 	bl	8002414 <_init>
 8001d44:	1b64      	subs	r4, r4, r5
 8001d46:	10a4      	asrs	r4, r4, #2
 8001d48:	2600      	movs	r6, #0
 8001d4a:	42a6      	cmp	r6, r4
 8001d4c:	d105      	bne.n	8001d5a <__libc_init_array+0x2e>
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d54:	4798      	blx	r3
 8001d56:	3601      	adds	r6, #1
 8001d58:	e7ee      	b.n	8001d38 <__libc_init_array+0xc>
 8001d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d5e:	4798      	blx	r3
 8001d60:	3601      	adds	r6, #1
 8001d62:	e7f2      	b.n	8001d4a <__libc_init_array+0x1e>
 8001d64:	08002540 	.word	0x08002540
 8001d68:	08002540 	.word	0x08002540
 8001d6c:	08002540 	.word	0x08002540
 8001d70:	08002544 	.word	0x08002544

08001d74 <__retarget_lock_init_recursive>:
 8001d74:	4770      	bx	lr

08001d76 <__retarget_lock_acquire_recursive>:
 8001d76:	4770      	bx	lr

08001d78 <__retarget_lock_release_recursive>:
 8001d78:	4770      	bx	lr

08001d7a <memset>:
 8001d7a:	4402      	add	r2, r0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d100      	bne.n	8001d84 <memset+0xa>
 8001d82:	4770      	bx	lr
 8001d84:	f803 1b01 	strb.w	r1, [r3], #1
 8001d88:	e7f9      	b.n	8001d7e <memset+0x4>
	...

08001d8c <_free_r>:
 8001d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d8e:	2900      	cmp	r1, #0
 8001d90:	d044      	beq.n	8001e1c <_free_r+0x90>
 8001d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d96:	9001      	str	r0, [sp, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8001d9e:	bfb8      	it	lt
 8001da0:	18e4      	addlt	r4, r4, r3
 8001da2:	f000 faf7 	bl	8002394 <__malloc_lock>
 8001da6:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <_free_r+0x94>)
 8001da8:	9801      	ldr	r0, [sp, #4]
 8001daa:	6813      	ldr	r3, [r2, #0]
 8001dac:	b933      	cbnz	r3, 8001dbc <_free_r+0x30>
 8001dae:	6063      	str	r3, [r4, #4]
 8001db0:	6014      	str	r4, [r2, #0]
 8001db2:	b003      	add	sp, #12
 8001db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001db8:	f000 baf2 	b.w	80023a0 <__malloc_unlock>
 8001dbc:	42a3      	cmp	r3, r4
 8001dbe:	d908      	bls.n	8001dd2 <_free_r+0x46>
 8001dc0:	6825      	ldr	r5, [r4, #0]
 8001dc2:	1961      	adds	r1, r4, r5
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	bf01      	itttt	eq
 8001dc8:	6819      	ldreq	r1, [r3, #0]
 8001dca:	685b      	ldreq	r3, [r3, #4]
 8001dcc:	1949      	addeq	r1, r1, r5
 8001dce:	6021      	streq	r1, [r4, #0]
 8001dd0:	e7ed      	b.n	8001dae <_free_r+0x22>
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	b10b      	cbz	r3, 8001ddc <_free_r+0x50>
 8001dd8:	42a3      	cmp	r3, r4
 8001dda:	d9fa      	bls.n	8001dd2 <_free_r+0x46>
 8001ddc:	6811      	ldr	r1, [r2, #0]
 8001dde:	1855      	adds	r5, r2, r1
 8001de0:	42a5      	cmp	r5, r4
 8001de2:	d10b      	bne.n	8001dfc <_free_r+0x70>
 8001de4:	6824      	ldr	r4, [r4, #0]
 8001de6:	4421      	add	r1, r4
 8001de8:	1854      	adds	r4, r2, r1
 8001dea:	42a3      	cmp	r3, r4
 8001dec:	6011      	str	r1, [r2, #0]
 8001dee:	d1e0      	bne.n	8001db2 <_free_r+0x26>
 8001df0:	681c      	ldr	r4, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	6053      	str	r3, [r2, #4]
 8001df6:	4421      	add	r1, r4
 8001df8:	6011      	str	r1, [r2, #0]
 8001dfa:	e7da      	b.n	8001db2 <_free_r+0x26>
 8001dfc:	d902      	bls.n	8001e04 <_free_r+0x78>
 8001dfe:	230c      	movs	r3, #12
 8001e00:	6003      	str	r3, [r0, #0]
 8001e02:	e7d6      	b.n	8001db2 <_free_r+0x26>
 8001e04:	6825      	ldr	r5, [r4, #0]
 8001e06:	1961      	adds	r1, r4, r5
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	bf04      	itt	eq
 8001e0c:	6819      	ldreq	r1, [r3, #0]
 8001e0e:	685b      	ldreq	r3, [r3, #4]
 8001e10:	6063      	str	r3, [r4, #4]
 8001e12:	bf04      	itt	eq
 8001e14:	1949      	addeq	r1, r1, r5
 8001e16:	6021      	streq	r1, [r4, #0]
 8001e18:	6054      	str	r4, [r2, #4]
 8001e1a:	e7ca      	b.n	8001db2 <_free_r+0x26>
 8001e1c:	b003      	add	sp, #12
 8001e1e:	bd30      	pop	{r4, r5, pc}
 8001e20:	200000d8 	.word	0x200000d8

08001e24 <sbrk_aligned>:
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4e0e      	ldr	r6, [pc, #56]	; (8001e60 <sbrk_aligned+0x3c>)
 8001e28:	460c      	mov	r4, r1
 8001e2a:	6831      	ldr	r1, [r6, #0]
 8001e2c:	4605      	mov	r5, r0
 8001e2e:	b911      	cbnz	r1, 8001e36 <sbrk_aligned+0x12>
 8001e30:	f000 f902 	bl	8002038 <_sbrk_r>
 8001e34:	6030      	str	r0, [r6, #0]
 8001e36:	4621      	mov	r1, r4
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f000 f8fd 	bl	8002038 <_sbrk_r>
 8001e3e:	1c43      	adds	r3, r0, #1
 8001e40:	d00a      	beq.n	8001e58 <sbrk_aligned+0x34>
 8001e42:	1cc4      	adds	r4, r0, #3
 8001e44:	f024 0403 	bic.w	r4, r4, #3
 8001e48:	42a0      	cmp	r0, r4
 8001e4a:	d007      	beq.n	8001e5c <sbrk_aligned+0x38>
 8001e4c:	1a21      	subs	r1, r4, r0
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f000 f8f2 	bl	8002038 <_sbrk_r>
 8001e54:	3001      	adds	r0, #1
 8001e56:	d101      	bne.n	8001e5c <sbrk_aligned+0x38>
 8001e58:	f04f 34ff 	mov.w	r4, #4294967295
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
 8001e60:	200000dc 	.word	0x200000dc

08001e64 <_malloc_r>:
 8001e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e68:	1ccd      	adds	r5, r1, #3
 8001e6a:	f025 0503 	bic.w	r5, r5, #3
 8001e6e:	3508      	adds	r5, #8
 8001e70:	2d0c      	cmp	r5, #12
 8001e72:	bf38      	it	cc
 8001e74:	250c      	movcc	r5, #12
 8001e76:	2d00      	cmp	r5, #0
 8001e78:	4607      	mov	r7, r0
 8001e7a:	db01      	blt.n	8001e80 <_malloc_r+0x1c>
 8001e7c:	42a9      	cmp	r1, r5
 8001e7e:	d905      	bls.n	8001e8c <_malloc_r+0x28>
 8001e80:	230c      	movs	r3, #12
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	2600      	movs	r6, #0
 8001e86:	4630      	mov	r0, r6
 8001e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e8c:	4e2e      	ldr	r6, [pc, #184]	; (8001f48 <_malloc_r+0xe4>)
 8001e8e:	f000 fa81 	bl	8002394 <__malloc_lock>
 8001e92:	6833      	ldr	r3, [r6, #0]
 8001e94:	461c      	mov	r4, r3
 8001e96:	bb34      	cbnz	r4, 8001ee6 <_malloc_r+0x82>
 8001e98:	4629      	mov	r1, r5
 8001e9a:	4638      	mov	r0, r7
 8001e9c:	f7ff ffc2 	bl	8001e24 <sbrk_aligned>
 8001ea0:	1c43      	adds	r3, r0, #1
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	d14d      	bne.n	8001f42 <_malloc_r+0xde>
 8001ea6:	6834      	ldr	r4, [r6, #0]
 8001ea8:	4626      	mov	r6, r4
 8001eaa:	2e00      	cmp	r6, #0
 8001eac:	d140      	bne.n	8001f30 <_malloc_r+0xcc>
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	4631      	mov	r1, r6
 8001eb2:	4638      	mov	r0, r7
 8001eb4:	eb04 0803 	add.w	r8, r4, r3
 8001eb8:	f000 f8be 	bl	8002038 <_sbrk_r>
 8001ebc:	4580      	cmp	r8, r0
 8001ebe:	d13a      	bne.n	8001f36 <_malloc_r+0xd2>
 8001ec0:	6821      	ldr	r1, [r4, #0]
 8001ec2:	3503      	adds	r5, #3
 8001ec4:	1a6d      	subs	r5, r5, r1
 8001ec6:	f025 0503 	bic.w	r5, r5, #3
 8001eca:	3508      	adds	r5, #8
 8001ecc:	2d0c      	cmp	r5, #12
 8001ece:	bf38      	it	cc
 8001ed0:	250c      	movcc	r5, #12
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4638      	mov	r0, r7
 8001ed6:	f7ff ffa5 	bl	8001e24 <sbrk_aligned>
 8001eda:	3001      	adds	r0, #1
 8001edc:	d02b      	beq.n	8001f36 <_malloc_r+0xd2>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	442b      	add	r3, r5
 8001ee2:	6023      	str	r3, [r4, #0]
 8001ee4:	e00e      	b.n	8001f04 <_malloc_r+0xa0>
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	1b52      	subs	r2, r2, r5
 8001eea:	d41e      	bmi.n	8001f2a <_malloc_r+0xc6>
 8001eec:	2a0b      	cmp	r2, #11
 8001eee:	d916      	bls.n	8001f1e <_malloc_r+0xba>
 8001ef0:	1961      	adds	r1, r4, r5
 8001ef2:	42a3      	cmp	r3, r4
 8001ef4:	6025      	str	r5, [r4, #0]
 8001ef6:	bf18      	it	ne
 8001ef8:	6059      	strne	r1, [r3, #4]
 8001efa:	6863      	ldr	r3, [r4, #4]
 8001efc:	bf08      	it	eq
 8001efe:	6031      	streq	r1, [r6, #0]
 8001f00:	5162      	str	r2, [r4, r5]
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	4638      	mov	r0, r7
 8001f06:	f104 060b 	add.w	r6, r4, #11
 8001f0a:	f000 fa49 	bl	80023a0 <__malloc_unlock>
 8001f0e:	f026 0607 	bic.w	r6, r6, #7
 8001f12:	1d23      	adds	r3, r4, #4
 8001f14:	1af2      	subs	r2, r6, r3
 8001f16:	d0b6      	beq.n	8001e86 <_malloc_r+0x22>
 8001f18:	1b9b      	subs	r3, r3, r6
 8001f1a:	50a3      	str	r3, [r4, r2]
 8001f1c:	e7b3      	b.n	8001e86 <_malloc_r+0x22>
 8001f1e:	6862      	ldr	r2, [r4, #4]
 8001f20:	42a3      	cmp	r3, r4
 8001f22:	bf0c      	ite	eq
 8001f24:	6032      	streq	r2, [r6, #0]
 8001f26:	605a      	strne	r2, [r3, #4]
 8001f28:	e7ec      	b.n	8001f04 <_malloc_r+0xa0>
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	6864      	ldr	r4, [r4, #4]
 8001f2e:	e7b2      	b.n	8001e96 <_malloc_r+0x32>
 8001f30:	4634      	mov	r4, r6
 8001f32:	6876      	ldr	r6, [r6, #4]
 8001f34:	e7b9      	b.n	8001eaa <_malloc_r+0x46>
 8001f36:	230c      	movs	r3, #12
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	f000 fa30 	bl	80023a0 <__malloc_unlock>
 8001f40:	e7a1      	b.n	8001e86 <_malloc_r+0x22>
 8001f42:	6025      	str	r5, [r4, #0]
 8001f44:	e7de      	b.n	8001f04 <_malloc_r+0xa0>
 8001f46:	bf00      	nop
 8001f48:	200000d8 	.word	0x200000d8

08001f4c <_puts_r>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	460e      	mov	r6, r1
 8001f50:	4605      	mov	r5, r0
 8001f52:	b118      	cbz	r0, 8001f5c <_puts_r+0x10>
 8001f54:	6983      	ldr	r3, [r0, #24]
 8001f56:	b90b      	cbnz	r3, 8001f5c <_puts_r+0x10>
 8001f58:	f7ff fe4a 	bl	8001bf0 <__sinit>
 8001f5c:	69ab      	ldr	r3, [r5, #24]
 8001f5e:	68ac      	ldr	r4, [r5, #8]
 8001f60:	b913      	cbnz	r3, 8001f68 <_puts_r+0x1c>
 8001f62:	4628      	mov	r0, r5
 8001f64:	f7ff fe44 	bl	8001bf0 <__sinit>
 8001f68:	4b2c      	ldr	r3, [pc, #176]	; (800201c <_puts_r+0xd0>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d120      	bne.n	8001fb0 <_puts_r+0x64>
 8001f6e:	686c      	ldr	r4, [r5, #4]
 8001f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f72:	07db      	lsls	r3, r3, #31
 8001f74:	d405      	bmi.n	8001f82 <_puts_r+0x36>
 8001f76:	89a3      	ldrh	r3, [r4, #12]
 8001f78:	0598      	lsls	r0, r3, #22
 8001f7a:	d402      	bmi.n	8001f82 <_puts_r+0x36>
 8001f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f7e:	f7ff fefa 	bl	8001d76 <__retarget_lock_acquire_recursive>
 8001f82:	89a3      	ldrh	r3, [r4, #12]
 8001f84:	0719      	lsls	r1, r3, #28
 8001f86:	d51d      	bpl.n	8001fc4 <_puts_r+0x78>
 8001f88:	6923      	ldr	r3, [r4, #16]
 8001f8a:	b1db      	cbz	r3, 8001fc4 <_puts_r+0x78>
 8001f8c:	3e01      	subs	r6, #1
 8001f8e:	68a3      	ldr	r3, [r4, #8]
 8001f90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60a3      	str	r3, [r4, #8]
 8001f98:	bb39      	cbnz	r1, 8001fea <_puts_r+0x9e>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da38      	bge.n	8002010 <_puts_r+0xc4>
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	210a      	movs	r1, #10
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f000 f89c 	bl	80020e0 <__swbuf_r>
 8001fa8:	3001      	adds	r0, #1
 8001faa:	d011      	beq.n	8001fd0 <_puts_r+0x84>
 8001fac:	250a      	movs	r5, #10
 8001fae:	e011      	b.n	8001fd4 <_puts_r+0x88>
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <_puts_r+0xd4>)
 8001fb2:	429c      	cmp	r4, r3
 8001fb4:	d101      	bne.n	8001fba <_puts_r+0x6e>
 8001fb6:	68ac      	ldr	r4, [r5, #8]
 8001fb8:	e7da      	b.n	8001f70 <_puts_r+0x24>
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <_puts_r+0xd8>)
 8001fbc:	429c      	cmp	r4, r3
 8001fbe:	bf08      	it	eq
 8001fc0:	68ec      	ldreq	r4, [r5, #12]
 8001fc2:	e7d5      	b.n	8001f70 <_puts_r+0x24>
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	f000 f8ee 	bl	80021a8 <__swsetup_r>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d0dd      	beq.n	8001f8c <_puts_r+0x40>
 8001fd0:	f04f 35ff 	mov.w	r5, #4294967295
 8001fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fd6:	07da      	lsls	r2, r3, #31
 8001fd8:	d405      	bmi.n	8001fe6 <_puts_r+0x9a>
 8001fda:	89a3      	ldrh	r3, [r4, #12]
 8001fdc:	059b      	lsls	r3, r3, #22
 8001fde:	d402      	bmi.n	8001fe6 <_puts_r+0x9a>
 8001fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fe2:	f7ff fec9 	bl	8001d78 <__retarget_lock_release_recursive>
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da04      	bge.n	8001ff8 <_puts_r+0xac>
 8001fee:	69a2      	ldr	r2, [r4, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dc06      	bgt.n	8002002 <_puts_r+0xb6>
 8001ff4:	290a      	cmp	r1, #10
 8001ff6:	d004      	beq.n	8002002 <_puts_r+0xb6>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	6022      	str	r2, [r4, #0]
 8001ffe:	7019      	strb	r1, [r3, #0]
 8002000:	e7c5      	b.n	8001f8e <_puts_r+0x42>
 8002002:	4622      	mov	r2, r4
 8002004:	4628      	mov	r0, r5
 8002006:	f000 f86b 	bl	80020e0 <__swbuf_r>
 800200a:	3001      	adds	r0, #1
 800200c:	d1bf      	bne.n	8001f8e <_puts_r+0x42>
 800200e:	e7df      	b.n	8001fd0 <_puts_r+0x84>
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	250a      	movs	r5, #10
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	6022      	str	r2, [r4, #0]
 8002018:	701d      	strb	r5, [r3, #0]
 800201a:	e7db      	b.n	8001fd4 <_puts_r+0x88>
 800201c:	080024fc 	.word	0x080024fc
 8002020:	0800251c 	.word	0x0800251c
 8002024:	080024dc 	.word	0x080024dc

08002028 <puts>:
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <puts+0xc>)
 800202a:	4601      	mov	r1, r0
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f7ff bf8d 	b.w	8001f4c <_puts_r>
 8002032:	bf00      	nop
 8002034:	20000010 	.word	0x20000010

08002038 <_sbrk_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d06      	ldr	r5, [pc, #24]	; (8002054 <_sbrk_r+0x1c>)
 800203c:	2300      	movs	r3, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	f7fe fb26 	bl	8000694 <_sbrk>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_sbrk_r+0x1a>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_sbrk_r+0x1a>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	200000e0 	.word	0x200000e0

08002058 <__sread>:
 8002058:	b510      	push	{r4, lr}
 800205a:	460c      	mov	r4, r1
 800205c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002060:	f000 f9a4 	bl	80023ac <_read_r>
 8002064:	2800      	cmp	r0, #0
 8002066:	bfab      	itete	ge
 8002068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800206a:	89a3      	ldrhlt	r3, [r4, #12]
 800206c:	181b      	addge	r3, r3, r0
 800206e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002072:	bfac      	ite	ge
 8002074:	6563      	strge	r3, [r4, #84]	; 0x54
 8002076:	81a3      	strhlt	r3, [r4, #12]
 8002078:	bd10      	pop	{r4, pc}

0800207a <__swrite>:
 800207a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207e:	461f      	mov	r7, r3
 8002080:	898b      	ldrh	r3, [r1, #12]
 8002082:	05db      	lsls	r3, r3, #23
 8002084:	4605      	mov	r5, r0
 8002086:	460c      	mov	r4, r1
 8002088:	4616      	mov	r6, r2
 800208a:	d505      	bpl.n	8002098 <__swrite+0x1e>
 800208c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002090:	2302      	movs	r3, #2
 8002092:	2200      	movs	r2, #0
 8002094:	f000 f906 	bl	80022a4 <_lseek_r>
 8002098:	89a3      	ldrh	r3, [r4, #12]
 800209a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800209e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020a2:	81a3      	strh	r3, [r4, #12]
 80020a4:	4632      	mov	r2, r6
 80020a6:	463b      	mov	r3, r7
 80020a8:	4628      	mov	r0, r5
 80020aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ae:	f000 b869 	b.w	8002184 <_write_r>

080020b2 <__sseek>:
 80020b2:	b510      	push	{r4, lr}
 80020b4:	460c      	mov	r4, r1
 80020b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ba:	f000 f8f3 	bl	80022a4 <_lseek_r>
 80020be:	1c43      	adds	r3, r0, #1
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	bf15      	itete	ne
 80020c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80020c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020ce:	81a3      	strheq	r3, [r4, #12]
 80020d0:	bf18      	it	ne
 80020d2:	81a3      	strhne	r3, [r4, #12]
 80020d4:	bd10      	pop	{r4, pc}

080020d6 <__sclose>:
 80020d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020da:	f000 b8d3 	b.w	8002284 <_close_r>
	...

080020e0 <__swbuf_r>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	460e      	mov	r6, r1
 80020e4:	4614      	mov	r4, r2
 80020e6:	4605      	mov	r5, r0
 80020e8:	b118      	cbz	r0, 80020f2 <__swbuf_r+0x12>
 80020ea:	6983      	ldr	r3, [r0, #24]
 80020ec:	b90b      	cbnz	r3, 80020f2 <__swbuf_r+0x12>
 80020ee:	f7ff fd7f 	bl	8001bf0 <__sinit>
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <__swbuf_r+0x98>)
 80020f4:	429c      	cmp	r4, r3
 80020f6:	d12b      	bne.n	8002150 <__swbuf_r+0x70>
 80020f8:	686c      	ldr	r4, [r5, #4]
 80020fa:	69a3      	ldr	r3, [r4, #24]
 80020fc:	60a3      	str	r3, [r4, #8]
 80020fe:	89a3      	ldrh	r3, [r4, #12]
 8002100:	071a      	lsls	r2, r3, #28
 8002102:	d52f      	bpl.n	8002164 <__swbuf_r+0x84>
 8002104:	6923      	ldr	r3, [r4, #16]
 8002106:	b36b      	cbz	r3, 8002164 <__swbuf_r+0x84>
 8002108:	6923      	ldr	r3, [r4, #16]
 800210a:	6820      	ldr	r0, [r4, #0]
 800210c:	1ac0      	subs	r0, r0, r3
 800210e:	6963      	ldr	r3, [r4, #20]
 8002110:	b2f6      	uxtb	r6, r6
 8002112:	4283      	cmp	r3, r0
 8002114:	4637      	mov	r7, r6
 8002116:	dc04      	bgt.n	8002122 <__swbuf_r+0x42>
 8002118:	4621      	mov	r1, r4
 800211a:	4628      	mov	r0, r5
 800211c:	f7ff fcc2 	bl	8001aa4 <_fflush_r>
 8002120:	bb30      	cbnz	r0, 8002170 <__swbuf_r+0x90>
 8002122:	68a3      	ldr	r3, [r4, #8]
 8002124:	3b01      	subs	r3, #1
 8002126:	60a3      	str	r3, [r4, #8]
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	6022      	str	r2, [r4, #0]
 800212e:	701e      	strb	r6, [r3, #0]
 8002130:	6963      	ldr	r3, [r4, #20]
 8002132:	3001      	adds	r0, #1
 8002134:	4283      	cmp	r3, r0
 8002136:	d004      	beq.n	8002142 <__swbuf_r+0x62>
 8002138:	89a3      	ldrh	r3, [r4, #12]
 800213a:	07db      	lsls	r3, r3, #31
 800213c:	d506      	bpl.n	800214c <__swbuf_r+0x6c>
 800213e:	2e0a      	cmp	r6, #10
 8002140:	d104      	bne.n	800214c <__swbuf_r+0x6c>
 8002142:	4621      	mov	r1, r4
 8002144:	4628      	mov	r0, r5
 8002146:	f7ff fcad 	bl	8001aa4 <_fflush_r>
 800214a:	b988      	cbnz	r0, 8002170 <__swbuf_r+0x90>
 800214c:	4638      	mov	r0, r7
 800214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <__swbuf_r+0x9c>)
 8002152:	429c      	cmp	r4, r3
 8002154:	d101      	bne.n	800215a <__swbuf_r+0x7a>
 8002156:	68ac      	ldr	r4, [r5, #8]
 8002158:	e7cf      	b.n	80020fa <__swbuf_r+0x1a>
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <__swbuf_r+0xa0>)
 800215c:	429c      	cmp	r4, r3
 800215e:	bf08      	it	eq
 8002160:	68ec      	ldreq	r4, [r5, #12]
 8002162:	e7ca      	b.n	80020fa <__swbuf_r+0x1a>
 8002164:	4621      	mov	r1, r4
 8002166:	4628      	mov	r0, r5
 8002168:	f000 f81e 	bl	80021a8 <__swsetup_r>
 800216c:	2800      	cmp	r0, #0
 800216e:	d0cb      	beq.n	8002108 <__swbuf_r+0x28>
 8002170:	f04f 37ff 	mov.w	r7, #4294967295
 8002174:	e7ea      	b.n	800214c <__swbuf_r+0x6c>
 8002176:	bf00      	nop
 8002178:	080024fc 	.word	0x080024fc
 800217c:	0800251c 	.word	0x0800251c
 8002180:	080024dc 	.word	0x080024dc

08002184 <_write_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4d07      	ldr	r5, [pc, #28]	; (80021a4 <_write_r+0x20>)
 8002188:	4604      	mov	r4, r0
 800218a:	4608      	mov	r0, r1
 800218c:	4611      	mov	r1, r2
 800218e:	2200      	movs	r2, #0
 8002190:	602a      	str	r2, [r5, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f7fe fa2d 	bl	80005f2 <_write>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_write_r+0x1e>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_write_r+0x1e>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	200000e0 	.word	0x200000e0

080021a8 <__swsetup_r>:
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <__swsetup_r+0xcc>)
 80021aa:	b570      	push	{r4, r5, r6, lr}
 80021ac:	681d      	ldr	r5, [r3, #0]
 80021ae:	4606      	mov	r6, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	b125      	cbz	r5, 80021be <__swsetup_r+0x16>
 80021b4:	69ab      	ldr	r3, [r5, #24]
 80021b6:	b913      	cbnz	r3, 80021be <__swsetup_r+0x16>
 80021b8:	4628      	mov	r0, r5
 80021ba:	f7ff fd19 	bl	8001bf0 <__sinit>
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <__swsetup_r+0xd0>)
 80021c0:	429c      	cmp	r4, r3
 80021c2:	d10f      	bne.n	80021e4 <__swsetup_r+0x3c>
 80021c4:	686c      	ldr	r4, [r5, #4]
 80021c6:	89a3      	ldrh	r3, [r4, #12]
 80021c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021cc:	0719      	lsls	r1, r3, #28
 80021ce:	d42c      	bmi.n	800222a <__swsetup_r+0x82>
 80021d0:	06dd      	lsls	r5, r3, #27
 80021d2:	d411      	bmi.n	80021f8 <__swsetup_r+0x50>
 80021d4:	2309      	movs	r3, #9
 80021d6:	6033      	str	r3, [r6, #0]
 80021d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80021dc:	81a3      	strh	r3, [r4, #12]
 80021de:	f04f 30ff 	mov.w	r0, #4294967295
 80021e2:	e03e      	b.n	8002262 <__swsetup_r+0xba>
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <__swsetup_r+0xd4>)
 80021e6:	429c      	cmp	r4, r3
 80021e8:	d101      	bne.n	80021ee <__swsetup_r+0x46>
 80021ea:	68ac      	ldr	r4, [r5, #8]
 80021ec:	e7eb      	b.n	80021c6 <__swsetup_r+0x1e>
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <__swsetup_r+0xd8>)
 80021f0:	429c      	cmp	r4, r3
 80021f2:	bf08      	it	eq
 80021f4:	68ec      	ldreq	r4, [r5, #12]
 80021f6:	e7e6      	b.n	80021c6 <__swsetup_r+0x1e>
 80021f8:	0758      	lsls	r0, r3, #29
 80021fa:	d512      	bpl.n	8002222 <__swsetup_r+0x7a>
 80021fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021fe:	b141      	cbz	r1, 8002212 <__swsetup_r+0x6a>
 8002200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002204:	4299      	cmp	r1, r3
 8002206:	d002      	beq.n	800220e <__swsetup_r+0x66>
 8002208:	4630      	mov	r0, r6
 800220a:	f7ff fdbf 	bl	8001d8c <_free_r>
 800220e:	2300      	movs	r3, #0
 8002210:	6363      	str	r3, [r4, #52]	; 0x34
 8002212:	89a3      	ldrh	r3, [r4, #12]
 8002214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002218:	81a3      	strh	r3, [r4, #12]
 800221a:	2300      	movs	r3, #0
 800221c:	6063      	str	r3, [r4, #4]
 800221e:	6923      	ldr	r3, [r4, #16]
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	89a3      	ldrh	r3, [r4, #12]
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	81a3      	strh	r3, [r4, #12]
 800222a:	6923      	ldr	r3, [r4, #16]
 800222c:	b94b      	cbnz	r3, 8002242 <__swsetup_r+0x9a>
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002238:	d003      	beq.n	8002242 <__swsetup_r+0x9a>
 800223a:	4621      	mov	r1, r4
 800223c:	4630      	mov	r0, r6
 800223e:	f000 f869 	bl	8002314 <__smakebuf_r>
 8002242:	89a0      	ldrh	r0, [r4, #12]
 8002244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002248:	f010 0301 	ands.w	r3, r0, #1
 800224c:	d00a      	beq.n	8002264 <__swsetup_r+0xbc>
 800224e:	2300      	movs	r3, #0
 8002250:	60a3      	str	r3, [r4, #8]
 8002252:	6963      	ldr	r3, [r4, #20]
 8002254:	425b      	negs	r3, r3
 8002256:	61a3      	str	r3, [r4, #24]
 8002258:	6923      	ldr	r3, [r4, #16]
 800225a:	b943      	cbnz	r3, 800226e <__swsetup_r+0xc6>
 800225c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002260:	d1ba      	bne.n	80021d8 <__swsetup_r+0x30>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	0781      	lsls	r1, r0, #30
 8002266:	bf58      	it	pl
 8002268:	6963      	ldrpl	r3, [r4, #20]
 800226a:	60a3      	str	r3, [r4, #8]
 800226c:	e7f4      	b.n	8002258 <__swsetup_r+0xb0>
 800226e:	2000      	movs	r0, #0
 8002270:	e7f7      	b.n	8002262 <__swsetup_r+0xba>
 8002272:	bf00      	nop
 8002274:	20000010 	.word	0x20000010
 8002278:	080024fc 	.word	0x080024fc
 800227c:	0800251c 	.word	0x0800251c
 8002280:	080024dc 	.word	0x080024dc

08002284 <_close_r>:
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	4d06      	ldr	r5, [pc, #24]	; (80022a0 <_close_r+0x1c>)
 8002288:	2300      	movs	r3, #0
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	602b      	str	r3, [r5, #0]
 8002290:	f7fe f9cb 	bl	800062a <_close>
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d102      	bne.n	800229e <_close_r+0x1a>
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	b103      	cbz	r3, 800229e <_close_r+0x1a>
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	bd38      	pop	{r3, r4, r5, pc}
 80022a0:	200000e0 	.word	0x200000e0

080022a4 <_lseek_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4d07      	ldr	r5, [pc, #28]	; (80022c4 <_lseek_r+0x20>)
 80022a8:	4604      	mov	r4, r0
 80022aa:	4608      	mov	r0, r1
 80022ac:	4611      	mov	r1, r2
 80022ae:	2200      	movs	r2, #0
 80022b0:	602a      	str	r2, [r5, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f7fe f9e0 	bl	8000678 <_lseek>
 80022b8:	1c43      	adds	r3, r0, #1
 80022ba:	d102      	bne.n	80022c2 <_lseek_r+0x1e>
 80022bc:	682b      	ldr	r3, [r5, #0]
 80022be:	b103      	cbz	r3, 80022c2 <_lseek_r+0x1e>
 80022c0:	6023      	str	r3, [r4, #0]
 80022c2:	bd38      	pop	{r3, r4, r5, pc}
 80022c4:	200000e0 	.word	0x200000e0

080022c8 <__swhatbuf_r>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	460e      	mov	r6, r1
 80022cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d0:	2900      	cmp	r1, #0
 80022d2:	b096      	sub	sp, #88	; 0x58
 80022d4:	4614      	mov	r4, r2
 80022d6:	461d      	mov	r5, r3
 80022d8:	da08      	bge.n	80022ec <__swhatbuf_r+0x24>
 80022da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	602a      	str	r2, [r5, #0]
 80022e2:	061a      	lsls	r2, r3, #24
 80022e4:	d410      	bmi.n	8002308 <__swhatbuf_r+0x40>
 80022e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ea:	e00e      	b.n	800230a <__swhatbuf_r+0x42>
 80022ec:	466a      	mov	r2, sp
 80022ee:	f000 f86f 	bl	80023d0 <_fstat_r>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	dbf1      	blt.n	80022da <__swhatbuf_r+0x12>
 80022f6:	9a01      	ldr	r2, [sp, #4]
 80022f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002300:	425a      	negs	r2, r3
 8002302:	415a      	adcs	r2, r3
 8002304:	602a      	str	r2, [r5, #0]
 8002306:	e7ee      	b.n	80022e6 <__swhatbuf_r+0x1e>
 8002308:	2340      	movs	r3, #64	; 0x40
 800230a:	2000      	movs	r0, #0
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	b016      	add	sp, #88	; 0x58
 8002310:	bd70      	pop	{r4, r5, r6, pc}
	...

08002314 <__smakebuf_r>:
 8002314:	898b      	ldrh	r3, [r1, #12]
 8002316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002318:	079d      	lsls	r5, r3, #30
 800231a:	4606      	mov	r6, r0
 800231c:	460c      	mov	r4, r1
 800231e:	d507      	bpl.n	8002330 <__smakebuf_r+0x1c>
 8002320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	6123      	str	r3, [r4, #16]
 8002328:	2301      	movs	r3, #1
 800232a:	6163      	str	r3, [r4, #20]
 800232c:	b002      	add	sp, #8
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	ab01      	add	r3, sp, #4
 8002332:	466a      	mov	r2, sp
 8002334:	f7ff ffc8 	bl	80022c8 <__swhatbuf_r>
 8002338:	9900      	ldr	r1, [sp, #0]
 800233a:	4605      	mov	r5, r0
 800233c:	4630      	mov	r0, r6
 800233e:	f7ff fd91 	bl	8001e64 <_malloc_r>
 8002342:	b948      	cbnz	r0, 8002358 <__smakebuf_r+0x44>
 8002344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002348:	059a      	lsls	r2, r3, #22
 800234a:	d4ef      	bmi.n	800232c <__smakebuf_r+0x18>
 800234c:	f023 0303 	bic.w	r3, r3, #3
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	81a3      	strh	r3, [r4, #12]
 8002356:	e7e3      	b.n	8002320 <__smakebuf_r+0xc>
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <__smakebuf_r+0x7c>)
 800235a:	62b3      	str	r3, [r6, #40]	; 0x28
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	6020      	str	r0, [r4, #0]
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	81a3      	strh	r3, [r4, #12]
 8002366:	9b00      	ldr	r3, [sp, #0]
 8002368:	6163      	str	r3, [r4, #20]
 800236a:	9b01      	ldr	r3, [sp, #4]
 800236c:	6120      	str	r0, [r4, #16]
 800236e:	b15b      	cbz	r3, 8002388 <__smakebuf_r+0x74>
 8002370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002374:	4630      	mov	r0, r6
 8002376:	f000 f83d 	bl	80023f4 <_isatty_r>
 800237a:	b128      	cbz	r0, 8002388 <__smakebuf_r+0x74>
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	f023 0303 	bic.w	r3, r3, #3
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	81a3      	strh	r3, [r4, #12]
 8002388:	89a0      	ldrh	r0, [r4, #12]
 800238a:	4305      	orrs	r5, r0
 800238c:	81a5      	strh	r5, [r4, #12]
 800238e:	e7cd      	b.n	800232c <__smakebuf_r+0x18>
 8002390:	08001b89 	.word	0x08001b89

08002394 <__malloc_lock>:
 8002394:	4801      	ldr	r0, [pc, #4]	; (800239c <__malloc_lock+0x8>)
 8002396:	f7ff bcee 	b.w	8001d76 <__retarget_lock_acquire_recursive>
 800239a:	bf00      	nop
 800239c:	200000d4 	.word	0x200000d4

080023a0 <__malloc_unlock>:
 80023a0:	4801      	ldr	r0, [pc, #4]	; (80023a8 <__malloc_unlock+0x8>)
 80023a2:	f7ff bce9 	b.w	8001d78 <__retarget_lock_release_recursive>
 80023a6:	bf00      	nop
 80023a8:	200000d4 	.word	0x200000d4

080023ac <_read_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4d07      	ldr	r5, [pc, #28]	; (80023cc <_read_r+0x20>)
 80023b0:	4604      	mov	r4, r0
 80023b2:	4608      	mov	r0, r1
 80023b4:	4611      	mov	r1, r2
 80023b6:	2200      	movs	r2, #0
 80023b8:	602a      	str	r2, [r5, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7fe f8fc 	bl	80005b8 <_read>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_read_r+0x1e>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_read_r+0x1e>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	200000e0 	.word	0x200000e0

080023d0 <_fstat_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4d07      	ldr	r5, [pc, #28]	; (80023f0 <_fstat_r+0x20>)
 80023d4:	2300      	movs	r3, #0
 80023d6:	4604      	mov	r4, r0
 80023d8:	4608      	mov	r0, r1
 80023da:	4611      	mov	r1, r2
 80023dc:	602b      	str	r3, [r5, #0]
 80023de:	f7fe f930 	bl	8000642 <_fstat>
 80023e2:	1c43      	adds	r3, r0, #1
 80023e4:	d102      	bne.n	80023ec <_fstat_r+0x1c>
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	b103      	cbz	r3, 80023ec <_fstat_r+0x1c>
 80023ea:	6023      	str	r3, [r4, #0]
 80023ec:	bd38      	pop	{r3, r4, r5, pc}
 80023ee:	bf00      	nop
 80023f0:	200000e0 	.word	0x200000e0

080023f4 <_isatty_r>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4d06      	ldr	r5, [pc, #24]	; (8002410 <_isatty_r+0x1c>)
 80023f8:	2300      	movs	r3, #0
 80023fa:	4604      	mov	r4, r0
 80023fc:	4608      	mov	r0, r1
 80023fe:	602b      	str	r3, [r5, #0]
 8002400:	f7fe f92f 	bl	8000662 <_isatty>
 8002404:	1c43      	adds	r3, r0, #1
 8002406:	d102      	bne.n	800240e <_isatty_r+0x1a>
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	b103      	cbz	r3, 800240e <_isatty_r+0x1a>
 800240c:	6023      	str	r3, [r4, #0]
 800240e:	bd38      	pop	{r3, r4, r5, pc}
 8002410:	200000e0 	.word	0x200000e0

08002414 <_init>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	bf00      	nop
 8002418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241a:	bc08      	pop	{r3}
 800241c:	469e      	mov	lr, r3
 800241e:	4770      	bx	lr

08002420 <_fini>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr
